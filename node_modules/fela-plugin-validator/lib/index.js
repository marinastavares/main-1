'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = validator;

var _felaUtils = require('fela-utils');

var _cssifyDeclaration = require('css-in-js-utils/lib/cssifyDeclaration');

var _cssifyDeclaration2 = _interopRequireDefault(_cssifyDeclaration);

var _isobject = require('isobject');

var _isobject2 = _interopRequireDefault(_isobject);

var _csslint = require('csslint');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultRules = _csslint.CSSLint.getRules().reduce(function (rules, _ref) {
  var id = _ref.id;
  return _extends({}, rules, _defineProperty({}, id, 1));
}, {});

function handleError(property, style, logInvalid, deleteInvalid, message, logObject) {
  if (deleteInvalid) {
    delete style[property];
  }
  if (logInvalid) {
    /* eslint-disable-next-line no-console */
    console.error('' + (deleteInvalid ? '[Deleted] ' : ' ') + message, logObject);
  }
}

function validateStyleObject(style, logInvalid, deleteInvalid, useCSSLint, cssRules) {
  var _loop = function _loop(property) {
    var value = style[property];

    if ((0, _isobject2.default)(value)) {
      if ((0, _felaUtils.isNestedSelector)(property) || (0, _felaUtils.isMediaQuery)(property) || (0, _felaUtils.isSupport)(property)) {
        validateStyleObject(value, logInvalid, deleteInvalid, useCSSLint, cssRules);
      } else {
        handleError(property, style, logInvalid, deleteInvalid, 'Invalid nested property. Only use nested media queries, pseudo classes, child selectors or &-combinators.\n          Maybe you forgot to add a plugin that resolves "' + property + '".', {
          property: property,
          value: value
        });
      }
    } else if (useCSSLint) {
      var _CSSLint$verify = _csslint.CSSLint.verify('.fela {' + (0, _cssifyDeclaration2.default)(property, value) + ';}', cssRules),
          messages = _CSSLint$verify.messages;

      messages.forEach(function (_ref2) {
        var message = _ref2.message;

        handleError(property, style, logInvalid, deleteInvalid, 'Invalid property "' + property + '" with value "' + value + '". ' + message.replace(/ at line .+, col .+\./, '.'), {
          property: property,
          value: value
        });
      });
    }
  };

  for (var property in style) {
    _loop(property);
  }
}

function isValidPercentage(percentage) {
  var percentageValue = parseFloat(percentage);

  return percentage.indexOf('%') !== -1 && percentageValue >= 0 && percentageValue <= 100;
}

function validateKeyframeObject(style, logInvalid, deleteInvalid, useCSSLint, cssRules) {
  for (var percentage in style) {
    var _value = style[percentage];
    if (!(0, _isobject2.default)(_value)) {
      handleError(percentage, style, logInvalid, deleteInvalid, 'Invalid keyframe value. An object was expected.', {
        percentage: percentage,
        style: _value
      });
      // check for invalid percentage values, it only allows from, to or 0% - 100%
    } else if (percentage !== 'from' && percentage !== 'to' && !isValidPercentage(percentage)) {
      handleError(percentage, style, logInvalid, deleteInvalid, 'Invalid keyframe property.\n        Expected either `to`, `from` or a percentage value between 0 and 100.', {
        percentage: percentage,
        style: _value
      });
    } else {
      validateStyleObject(_value, logInvalid, deleteInvalid, useCSSLint, cssRules);
    }
  }
}

function validateStyle(style, type, options) {
  var logInvalid = options.logInvalid,
      deleteInvalid = options.deleteInvalid,
      useCSSLint = options.useCSSLint,
      cssRules = options.cssRules;


  if (type === _felaUtils.KEYFRAME_TYPE) {
    validateKeyframeObject(style, logInvalid, deleteInvalid, useCSSLint, cssRules);
  } else if (type === _felaUtils.RULE_TYPE) {
    validateStyleObject(style, logInvalid, deleteInvalid, useCSSLint, cssRules);
  }

  return style;
}

var defaultOptions = {
  logInvalid: true,
  deleteInvalid: false,
  useCSSLint: false
};

function validator() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var useCSSLint = options.useCSSLint;

  var preparedOptions = _extends({}, defaultOptions, options);

  preparedOptions.cssRules = (0, _isobject2.default)(useCSSLint) ? _extends({}, defaultRules, useCSSLint) : defaultRules;

  return function (style, type) {
    return validateStyle(style, type, preparedOptions);
  };
}