var _excluded = ["theme"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable behance/no-deprecated */
import React, { useContext } from 'react';
import { withTheme, RendererContext } from 'react-fela'; // eslint-disable-line behance/no-deprecated

import getReactDisplayName from 'react-display-name';

function applyStaticStyles(staticStyles, ComponentToWrap) {
  var CompWithStaticStyles = _ref => {
    var _renderer$renderStati;

    var {
      theme
    } = _ref,
        passThroughProps = _objectWithoutProperties(_ref, _excluded);

    var renderer = useContext(RendererContext);
    var contextTheme = theme || {};
    var result = typeof staticStyles === 'function' ? staticStyles(contextTheme) : staticStyles;
    renderer === null || renderer === void 0 ? void 0 : (_renderer$renderStati = renderer.renderStatic) === null || _renderer$renderStati === void 0 ? void 0 : _renderer$renderStati.call(renderer, result);
    return /*#__PURE__*/React.createElement(ComponentToWrap, passThroughProps);
  };

  var WithThemeHOC = withTheme(CompWithStaticStyles);
  WithThemeHOC.displayName = getReactDisplayName(ComponentToWrap);
  return WithThemeHOC;
}

export default applyStaticStyles;