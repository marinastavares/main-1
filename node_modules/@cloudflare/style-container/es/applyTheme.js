function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable behance/no-deprecated */
import React, { Component } from 'react';
import { withTheme, ThemeProvider } from 'react-fela'; // eslint-disable-line behance/no-deprecated

import mergeThemes from './mergeThemes';
import getReactDisplayName from 'react-display-name';

function applyTheme(ComponentToWrap) {
  for (var _len = arguments.length, themes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    themes[_key - 1] = arguments[_key];
  }

  if (!ComponentToWrap) {
    throw new InvalidComponentError(ComponentToWrap);
  }

  class ThemedComponent extends Component {
    render() {
      return /*#__PURE__*/React.createElement(ThemeProvider, {
        theme: mergeThemes(this.props.theme || {}, ...themes)
      }, /*#__PURE__*/React.createElement(ComponentToWrap, this.props));
    }

  }

  _defineProperty(ThemedComponent, "_isFelaComponent", true);

  var WithThemeHOC = withTheme(ThemedComponent);
  WithThemeHOC.displayName = getReactDisplayName(ComponentToWrap);
  return WithThemeHOC;
}

export default applyTheme;
export class InvalidComponentError extends Error {
  constructor(component) {
    super("applyTheme received an invalid first argument: ".concat(component));
    this.component = component;
  }

}