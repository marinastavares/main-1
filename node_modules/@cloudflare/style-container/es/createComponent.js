import isValidElementProp from './isValidElementProp';
import { createComponent as createFelaComponent } from 'react-fela';
import getReactDisplayName from 'react-display-name';
import { objectKeys } from './types';
var EMPTY_PASSTHROUGH_PROPS = []; // the order of these overloads is important to allow the compiler to
// correctly resolve to the right function signature

function createComponent(rule, base, passthroughProps) {
  var _base = base !== null && base !== void 0 ? base : 'div';

  var Component = createFelaComponent(rule, _base, passthroughProps !== null && passthroughProps !== void 0 ? passthroughProps : _base._isFelaComponent ? // fela merges the passthrough props of nested style components,
  // so if we're wrapping another style component we want to defer
  // determining passthrough props to a leaf-level component
  EMPTY_PASSTHROUGH_PROPS : typeof _base !== 'string' ? // A plain React component
  // (React component -> pass through all props)
  objectKeys : // a DOM element
  // (string -> dom element's acceptable props)
  props => objectKeys(props).filter(prop => isValidElementProp(_base, prop)));
  Component.displayName = getReactDisplayName(_base);
  return Component;
}

export default createComponent;