function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import memoize from 'lodash/memoize';
import pickBy from 'lodash/pickBy';
var globalAttributes = [
/* React-specific Attributes */
'defaultChecked', 'defaultValue', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'children', 'dangerouslySetInnerHTML',
/* Standard HTML Attributes */
'accessKey', 'className', 'contentEditable', 'contextMenu', 'dir', 'draggable', // 'hidden', probably best to not allow this attribute
'id', 'lang', 'placeholder', 'slot', 'spellCheck', 'style', 'tabIndex', 'title',
/* Unknown */
'inputMode', 'is', 'radioGroup',
/* WAI-ARIA */
'role',
/* RDFa Attributes */
'about', 'datatype', 'inlist', 'prefix', 'property', 'resource', 'typeof', 'vocab',
/* Non-standard Attributes */
'autoCapitalize', 'autoCorrect', 'autoSave', // 'color', probably best to not allow this attribute
'itemProp', 'itemScope', 'itemType', 'itemID', 'itemRef', 'results', 'security', 'unselectable'];
var htmlElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr'];
export var ariaAttributes = ['aria-activedescendant', 'aria-atomic', 'aria-autocomplete', 'aria-busy', 'aria-checked', 'aria-colcount', 'aria-colindex', 'aria-colspan', 'aria-controls', 'aria-current', 'aria-describedby', 'aria-details', 'aria-disabled', 'aria-dropeffect', 'aria-errormessage', 'aria-expanded', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-keyshortcuts', 'aria-label', 'aria-labelledby', 'aria-level', 'aria-live', 'aria-modal', 'aria-multiline', 'aria-multiselectable', 'aria-orientation', 'aria-owns', 'aria-placeholder', 'aria-posinset', 'aria-pressed', 'aria-readonly', 'aria-relevant', 'aria-required', 'aria-roledescription', 'aria-rowcount', 'aria-rowindex', 'aria-rowspan', 'aria-selected', 'aria-setsize', 'aria-sort', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'role'];
var extendedAttributes = {
  a: ['download', 'href', 'hrefLang', 'media', 'rel', 'target', 'type', 'referrerPolicy'],
  area: ['alt', 'coords', 'download', 'href', 'hrefLang', 'media', 'rel', 'shape', 'target'],
  audio: ['autoPlay', 'controls', 'controlsList', 'crossOrigin', 'loop', 'mediaGroup', 'muted', 'playsinline', 'preload', 'src'],
  base: ['href', 'target'],
  blockquote: ['cite'],
  button: ['autoFocus', 'disabled', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'name', 'type', 'value'],
  canvas: ['height', 'width'],
  col: ['span', 'width'],
  colgroup: ['span'],
  del: ['cite', 'dateTime'],
  details: ['open'],
  dialog: ['open'],
  embed: ['height', 'src', 'type', 'width'],
  fieldset: ['disabled', 'form', 'name'],
  form: ['acceptCharset', 'action', 'autoComplete', 'encType', 'method', 'name', 'noValidate', 'target'],
  html: ['manifest'],
  iframe: ['allow', 'allowFullScreen', 'allowTransparency', 'frameBorder', 'height', 'marginHeight', 'marginWidth', 'name', 'sandbox', 'scrolling', 'seamless', 'src', 'srcDoc', 'width'],
  img: ['alt', 'crossOrigin', 'decoding', 'height', 'sizes', 'src', 'srcSet', 'useMap', 'width'],
  input: ['accept', 'alt', 'autoComplete', 'autoFocus', 'capture', 'checked', 'crossOrigin', 'disabled', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'height', 'list', 'max', 'maxLength', 'min', 'minLength', 'multiple', 'name', 'pattern', 'placeholder', 'readOnly', 'required', 'size', 'src', 'step', 'type', 'value', 'width'],
  ins: ['cite', 'dateTime'],
  keygen: ['autoFocus', 'challenge', 'disabled', 'form', 'keyType', 'keyParams', 'name'],
  label: ['form', 'htmlFor'],
  li: ['value'],
  link: ['as', 'crossOrigin', 'href', 'hrefLang', 'integrity', 'media', 'rel', 'sizes', 'type'],
  map: ['name'],
  menu: ['type'],
  meta: ['charSet', 'content', 'httpEquiv', 'name'],
  meter: ['form', 'high', 'low', 'max', 'min', 'optimum', 'value'],
  q: ['cite'],
  object: ['classID', 'data', 'form', 'height', 'name', 'type', 'useMap', 'width', 'wmode'],
  ol: ['reversed', 'start', 'type'],
  optgroup: ['disabled', 'label'],
  option: ['disabled', 'label', 'selected', 'value'],
  output: ['form', 'htmlFor', 'name'],
  param: ['name', 'value'],
  progress: ['max', 'value'],
  script: ['async', 'charSet', 'crossOrigin', 'defer', 'integrity', 'noModule', 'nonce', 'src', 'type'],
  select: ['autoComplete', 'autoFocus', 'disabled', 'form', 'multiple', 'name', 'required', 'size', 'value'],
  source: ['media', 'sizes', 'src', 'srcSet', 'type'],
  style: ['media', 'nonce', 'scoped', 'type'],
  table: ['cellPadding', 'cellSpacing', 'summary'],
  textarea: ['autoComplete', 'autoFocus', 'cols', 'dirName', 'disabled', 'form', 'maxLength', 'minLength', 'name', 'placeholder', 'readOnly', 'required', 'rows', 'value', 'wrap'],
  td: [// 'align', DEPRECATED
  'colSpan', 'headers', 'rowSpan', 'scope'],
  th: [// 'align', DEPRECATED
  'colSpan', 'headers', 'rowSpan', 'scope'],
  time: ['dateTime'],
  track: ['default', 'kind', 'label', 'src', 'srcLang'],
  video: ['autoPlay', 'controls', 'controlsList', 'crossOrigin', 'loop', 'mediaGroup', 'muted', 'playsinline', 'preload', 'src', 'height', 'playsInline', 'poster', 'width']
};
var svgElements = ['animate', 'animateMotion', 'animateTransform', 'circle', 'clipPath', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'switch', 'symbol', 'text', 'textPath', 'tspan', 'use', 'view'];
var svgAttributes = ['accentHeight', 'accumulate', 'additive', 'alignmentBaseline', 'allowReorder', 'alphabetic', 'amplitude', 'arabicForm', 'ascent', 'attributeName', 'attributeType', 'autoReverse', 'azimuth', 'baseFrequency', 'baselineShift', 'baseProfile', 'bbox', 'begin', 'bias', 'by', 'calcMode', 'capHeight', 'clip', 'clipPath', 'clipPathUnits', 'clipRule', 'color', 'colorInterpolation', 'colorInterpolationFilters', 'colorProfile', 'colorRendering', 'contentScriptType', 'contentStyleType', 'cursor', 'cx', 'cy', 'd', 'decelerate', 'descent', 'diffuseConstant', 'direction', 'display', 'divisor', 'dominantBaseline', 'dur', 'dx', 'dy', 'edgeMode', 'elevation', 'enableBackground', 'end', 'exponent', 'externalResourcesRequired', 'fill', 'fillOpacity', 'fillRule', 'filter', 'filterRes', 'filterUnits', 'floodColor', 'floodOpacity', 'focusable', 'fontFamily', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontWeight', 'format', 'from', 'fx', 'fy', 'g1', 'g2', 'glyphName', 'glyphOrientationHorizontal', 'glyphOrientationVertical', 'glyphRef', 'gradientTransform', 'gradientUnits', // 'hanging' DEPRECATED,
'height', 'horizAdvX', 'horizOriginX', 'href', 'ideographic', 'imageRendering', 'in2', 'in', 'intercept', 'k1', 'k2', 'k3', 'k4', 'k', 'kernelMatrix', 'kernelUnitLength', 'kerning', 'keyPoints', 'keySplines', 'keyTimes', 'lengthAdjust', 'letterSpacing', 'lightingColor', 'limitingConeAngle', 'local', 'markerEnd', 'markerHeight', 'markerMid', 'markerStart', 'markerUnits', 'markerWidth', 'mask', 'maskContentUnits', 'maskUnits', 'mathematical', 'max', 'media', 'method', 'min', 'mode', 'name', 'numOctaves', 'offset', 'opacity', 'operator', 'order', 'orient', 'orientation', 'origin', 'overflow', 'overlinePosition', 'overlineThickness', 'paintOrder', 'panose1', 'pathLength', 'patternContentUnits', 'patternTransform', 'patternUnits', 'pointerEvents', 'points', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'preserveAlpha', 'preserveAspectRatio', 'primitiveUnits', 'r', 'radius', 'refX', 'refY', 'renderingIntent', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'result', 'rotate', 'rx', 'ry', 'scale', 'seed', 'shapeRendering', 'slope', 'spacing', 'specularConstant', 'specularExponent', 'speed', 'spreadMethod', 'startOffset', 'stdDeviation', 'stemh', 'stemv', 'stitchTiles', 'stopColor', 'stopOpacity', 'strikethroughPosition', 'strikethroughThickness', 'string', 'stroke', 'strokeDasharray', 'strokeDashoffset', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'surfaceScale', 'systemLanguage', 'tableValues', 'target', 'targetX', 'targetY', 'textAnchor', 'textDecoration', 'textLength', 'textRendering', 'to', 'transform', 'type', 'u1', 'u2', 'underlinePosition', 'underlineThickness', 'unicode', 'unicodeBidi', 'unicodeRange', 'unitsPerEm', 'vAlphabetic', 'values', 'vectorEffect', 'version', 'vertAdvY', 'vertOriginX', 'vertOriginY', 'vHanging', 'vIdeographic', 'viewBox', 'viewTarget', 'visibility', 'vMathematical', 'width', 'widths', 'wordSpacing', 'writingMode', 'x1', 'x2', 'x', 'xChannelSelector', 'xHeight', 'xlinkActuate', 'xlinkArcrole', 'xlinkHref', 'xlinkRole', 'xlinkShow', 'xlinkTitle', 'xlinkType', 'xmlBase', 'xmlLang', 'xmlns', 'xmlnsXlink', 'xmlSpace', 'y1', 'y2', 'y', 'yChannelSelector', 'z', 'zoomAndPan'];
var eventHandlerPattern = "on[A-Z]\\w+";
var globalAttributePattern = globalAttributes.join('|');
var dataAttributePattern = "data(?:-\\w+)+";
var ariaAttributePattern = ariaAttributes.join('|');
var htmlRegexMap = htmlElements.reduce((map, tag) => {
  var extendedAttrs = extendedAttributes[tag] || [];
  var patterns = [eventHandlerPattern, globalAttributePattern, dataAttributePattern, ariaAttributePattern, ...extendedAttrs].join('|');
  return Object.assign(map, {
    [tag]: new RegExp("^(?:".concat(patterns, ")$"))
  });
}, {});
var svgRegexMap = svgElements.reduce((map, tag) => {
  var patterns = [eventHandlerPattern, globalAttributePattern, dataAttributePattern, ariaAttributePattern, ...svgAttributes].join('|');
  return Object.assign(map, {
    [tag]: new RegExp("^(?:".concat(patterns, ")$"))
  });
}, {});

var elementRegexMap = _objectSpread(_objectSpread({}, htmlRegexMap), svgRegexMap);

export var isValidElementProp = memoize((tag, attr) => {
  var regex = elementRegexMap[tag];
  return regex ? regex.test(attr) : false;
}, (tag, attr) => "".concat(tag, "#").concat(attr));
export var filterValidElementProps = (tag, props) => pickBy(props, (val, prop) => isValidElementProp(tag, prop));
export default isValidElementProp;