"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _componentIcon = require("@cloudflare/component-icon");

var _styleContainer = require("@cloudflare/style-container");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var CaretIconWrapper = (0, _styleContainer.createComponent)(function (_ref) {
  var isActive = _ref.isActive,
      startAngle = _ref.startAngle,
      endAngle = _ref.endAngle,
      duration = _ref.duration;
  return {
    position: 'relative',
    top: '0.2rem',
    display: 'inline-block',
    '& svg': {
      transform: "rotate(".concat(isActive ? endAngle : startAngle, "deg)"),
      transition: "transform ".concat(duration, "ms ease")
    }
  };
}, 'span');

var ArrowSwivel = function ArrowSwivel(_ref2) {
  var onClick = _ref2.onClick,
      _ref2$isActive = _ref2.isActive,
      isActive = _ref2$isActive === void 0 ? false : _ref2$isActive,
      _ref2$startAngle = _ref2.startAngle,
      startAngle = _ref2$startAngle === void 0 ? 0 : _ref2$startAngle,
      _ref2$endAngle = _ref2.endAngle,
      endAngle = _ref2$endAngle === void 0 ? 90 : _ref2$endAngle,
      _ref2$duration = _ref2.duration,
      duration = _ref2$duration === void 0 ? 200 : _ref2$duration,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? 'blue.4' : _ref2$color,
      size = _ref2.size;
  return /*#__PURE__*/React.createElement(CaretIconWrapper, {
    startAngle: startAngle,
    endAngle: endAngle,
    onClick: onClick,
    isActive: isActive,
    duration: duration
  }, /*#__PURE__*/React.createElement(_componentIcon.Icon, {
    label: "caret-right",
    type: "caret-right",
    color: color,
    size: size
  }));
};

ArrowSwivel.propTypes = {
  isActive: _propTypes.default.bool,
  startAngle: _propTypes.default.number,
  endAngle: _propTypes.default.number,
  onClick: _propTypes.default.func,
  duration: _propTypes.default.number,
  color: _propTypes.default.string,
  size: _propTypes.default.string
};
ArrowSwivel.defaultProps = {
  isActive: false,
  startAngle: 0,
  endAngle: 90,
  duration: 200,
  color: 'blue.4'
};
ArrowSwivel.displayName = 'ArrowSwivel';
var _default = ArrowSwivel;
exports.default = _default;