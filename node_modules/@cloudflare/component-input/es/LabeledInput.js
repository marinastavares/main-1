function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { createStyledComponent } from '@cloudflare/style-container';
import { Box } from '@cloudflare/component-box';
import Input from './Input';
var InputLabel = createStyledComponent(function (_ref) {
  var theme = _ref.theme;
  return {
    color: 'gray.3',
    textAlign: 'center',
    backgroundColor: 'gray.9',
    borderColor: 'gray.5',
    borderTop: "1px solid ".concat(theme.colors.gray[5]),
    borderBottom: "1px solid ".concat(theme.colors.gray[5]),
    borderLeft: "1px solid ".concat(theme.colors.gray[5]),
    whiteSpace: 'nowrap',
    marginRight: '-1px',
    borderTopLeftRadius: '1px',
    borderBottomLeftRadius: '1px',
    p: 2,
    fontSize: 2,
    lineHeight: 'initial'
  };
});
InputLabel.setDisplayName('InputLabel');

var LabeledInput = function LabeledInput(_ref2) {
  var label = _ref2.label,
      otherProps = _objectWithoutProperties(_ref2, ["label"]);

  return React.createElement(Box, {
    display: "flex",
    width: "100%",
    mb: 3
  }, label && React.createElement(InputLabel, null, label), React.createElement(Box, {
    flexGrow: 1
  }, React.createElement(Input, _extends({}, otherProps, {
    mb: 0,
    borderRadius: "0 1px 1px 0"
  }))));
};

LabeledInput.displayName = 'LabeledInput';
LabeledInput.propTypes = {
  label: PropTypes.string
};
export default LabeledInput;