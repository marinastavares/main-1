function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null) return null; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/* eslint-disable behance/no-deprecated */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { withTheme, ThemeProvider } from 'react-fela'; // eslint-disable-line behance/no-deprecated

import mergeThemes from './mergeThemes';
import { hocDisplayName, addDisplayName } from './displayName';
export var getDisplayName = hocDisplayName('Themed');

var applyTheme = function applyTheme(ComponentToWrap) {
  for (var _len = arguments.length, themes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    themes[_key - 1] = arguments[_key];
  }

  if (!ComponentToWrap) {
    throw new InvalidComponentError(ComponentToWrap);
  }

  var ThemedComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ThemedComponent, _Component);

    function ThemedComponent() {
      _classCallCheck(this, ThemedComponent);

      return _possibleConstructorReturn(this, _getPrototypeOf(ThemedComponent).apply(this, arguments));
    }

    _createClass(ThemedComponent, [{
      key: "render",
      value: function render() {
        return React.createElement(ThemeProvider, {
          theme: mergeThemes.apply(void 0, [this.props.theme || {}].concat(themes))
        }, React.createElement(ComponentToWrap, this.props));
      }
    }]);

    return ThemedComponent;
  }(Component);

  ThemedComponent._isFelaComponent = true;
  ThemedComponent.propTypes = {
    theme: PropTypes.object
  };
  var WithThemeHOC = withTheme(ThemedComponent);
  addDisplayName(WithThemeHOC, ComponentToWrap, getDisplayName);
  return WithThemeHOC;
};

export default applyTheme;
export var InvalidComponentError =
/*#__PURE__*/
function (_Error) {
  _inherits(InvalidComponentError, _Error);

  function InvalidComponentError(component) {
    var _this;

    _classCallCheck(this, InvalidComponentError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InvalidComponentError).call(this, "applyTheme received an invalid first argument: ".concat(component)));
    _this.component = component;
    return _this;
  }

  return InvalidComponentError;
}(_wrapNativeSuper(Error));