import { ValueOfArray } from '@cloudflare/types';
import lightColors from './colors/light';
import darkColors from './colors/dark';
declare const colorScales: readonly ["red", "orange", "gold", "green", "cyan", "blue", "indigo", "violet", "pink", "gray"];
export declare type ColorOnScale = typeof colorScales[number];
export declare type ThemeColor = {
    [K in ColorOnScale]: ValueOfArray<typeof lightColors[K]>;
}[ColorOnScale];
declare const colors: {
    cfOrange: string;
    marketing: {
        orange: string;
        lightOrange: string;
        red: string;
        lightRed: string;
        green: string;
        lightGreen: string;
        cyan: string;
        lightCyan: string;
        purple: string;
        lightPurple: string;
        blue: string;
        lightBlue: string;
        gray: string[];
        black: string;
    };
    vendor: {
        twitter: string;
        facebook: string;
    };
};
declare type CommonColors = keyof typeof lightColors & keyof typeof darkColors;
declare type OnlyCommonColors = Pick<typeof lightColors, CommonColors> | Pick<typeof darkColors, CommonColors>;
declare type MergedColors = typeof colors & OnlyCommonColors;
export declare const setColorOverride: (color: string, index: number, value?: string | undefined) => void;
export declare const revertColorOverrides: () => void;
export declare const fontSizes: number[];
declare const theme: {
    readonly modeTransitionTime: 500;
    readonly breakpoints: {
        readonly mobile: "218px";
        readonly mobileWide: "487px";
        readonly tablet: "755px";
        readonly tabletLegacy: "788px";
        readonly tabletWide: "880px";
        readonly desktop: "1024px";
        readonly desktopLegacy: "1056px";
        readonly desktopLarge: "1562px";
    };
    readonly fontSizes: number[];
    readonly space: readonly [0, 4, 8, 16, 32, 64, 128, 256];
    readonly radii: readonly [0, 3, 5];
    readonly measure: {
        readonly narrow: "20em";
        readonly default: "30em";
        readonly wide: "34em";
    };
    readonly lineHeights: {
        readonly solid: 1;
        readonly title: 1.25;
        readonly copy: 1.5;
    };
    readonly gradient: {
        readonly skyDew: "linear-gradient(to right, #76C4E2, #85CBA8)";
        readonly twilightDew: "linear-gradient(to right, #8176B5, #85CBA8)";
        readonly twilightSky: "linear-gradient(to right, #8176B5, #76C4E2)";
        readonly twilightSunset: "linear-gradient(to right, #8176B5, #BA77B1)";
        readonly twilightDawn: "linear-gradient(to right, #8176B5, #F16975)";
        readonly dawnSunrise: "linear-gradient(to right, #F16975, #F69259)";
        readonly sunriseLightning: "linear-gradient(to right, #F69259, #FFDB6F)";
        readonly dewLightning: "linear-gradient(to right, #85CBA8, #FFDB6F)";
    };
    readonly shadows: readonly ["0 0 20px 0 rgba(136,136,136,0.50)"];
    readonly colors: MergedColors;
    readonly mixins: {
        focus: ({ border, invalid, focused, disabled, within, ...boxShadowProps }?: {
            border?: boolean | undefined;
            focused?: boolean | undefined;
            within?: boolean | undefined;
            disabled?: boolean | undefined;
        } & {
            invalid?: boolean | undefined;
            space?: number | undefined;
            outline?: number | undefined;
            inset?: boolean | undefined;
        }) => {
            borderColor?: string | undefined;
            outline?: string | undefined;
            transition?: string | undefined;
            boxShadow?: string | undefined;
        };
        error: ({ compact }: {
            compact?: boolean | undefined;
        }) => {
            color: string;
            fontSize: number;
        };
        shadow: ({ x, y, spread, blur, opacity }?: {
            x?: number | undefined;
            y?: number | undefined;
            spread?: number | undefined;
            blur?: number | undefined;
            opacity?: number | undefined;
        }) => {
            boxShadow: string;
        };
        link: ({ disabled }: {
            disabled?: boolean | undefined;
        }) => {
            display: string;
            color: string;
            transition: string;
            cursor: string;
            '& svg': {
                fill: string;
            };
            '&:hover': {
                color: string;
                '& svg': {
                    fill: string;
                };
            };
            '&:active': {
                color: string;
                outline: string;
                '& svg': {
                    fill: string;
                };
            };
            '&:focus': {
                color: string;
            };
        };
        input: ({ invalid, disabled, radius, color, inline, compact }: {
            invalid?: boolean | undefined;
            disabled?: boolean | undefined;
            loading?: boolean | undefined;
            radius?: any;
            color?: string | undefined;
            inline?: boolean | undefined;
            compact?: boolean | undefined;
        }) => {
            fontFamily: "-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, \"Helvetica Neue\",  Arial, sans-serif";
            fontSize: number;
            outline: string;
            color: string;
            opacity: number;
            backgroundColor: string;
            borderWidth: string;
            borderStyle: string;
            borderColor: string;
            borderRadius: any;
            transition: string;
            '&:hover': {
                borderColor?: string | undefined;
            };
            '&:active': {
                borderColor?: string | undefined;
            };
            '&::placeholder': {
                color: string;
            };
        };
    };
    readonly fontSize: "15px";
    readonly boxShadow: "0 0 20px 0 rgba(136,136,136,0.50)";
    readonly inputFontSize: "13px";
    readonly lineHeight: 1.5;
    readonly inputLineHeight: 1.4;
    readonly inputHeight: "2.26667rem";
    readonly em: "1em";
    readonly rem: "1rem";
    readonly fontFamily: "-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, \"Helvetica Neue\",  Arial, sans-serif";
    readonly weightLight: 300;
    readonly weightNormal: 400;
    readonly weightSemiBold: 600;
    readonly weightBold: 700;
    readonly fontWeight: 400;
    readonly fontWeightLight: 300;
    readonly borderRadius: "2px";
    readonly zIndexMax: 1000;
    readonly zIndexModal: 1400;
};
export default theme;
