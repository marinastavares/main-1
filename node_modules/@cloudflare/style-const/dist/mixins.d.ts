declare type FocusBoxShadowProps = {
    invalid?: boolean;
    space?: number;
    outline?: number;
    inset?: boolean;
};
declare type FocusProps = {
    border?: boolean;
    focused?: boolean;
    within?: boolean;
    disabled?: boolean;
} & FocusBoxShadowProps;
export declare const focusBoxShadow: ({ invalid, space, outline, inset }?: FocusBoxShadowProps) => string;
declare type ErrorProps = {
    compact?: boolean;
};
declare type LinkProps = {
    disabled?: boolean;
};
declare type ShadowProps = {
    x?: number;
    y?: number;
    spread?: number;
    blur?: number;
    opacity?: number;
};
declare type InputProps = {
    invalid?: boolean;
    disabled?: boolean;
    loading?: boolean;
    radius?: any;
    color?: string;
    inline?: boolean;
    compact?: boolean;
};
declare const _default: {
    focus: ({ border, invalid, focused, disabled, within, ...boxShadowProps }?: FocusProps) => {
        borderColor?: string | undefined;
        outline?: string | undefined;
        transition?: string | undefined;
        boxShadow?: string | undefined;
    };
    error: ({ compact }: ErrorProps) => {
        color: string;
        fontSize: number;
    };
    shadow: ({ x, y, spread, blur, opacity }?: ShadowProps) => {
        boxShadow: string;
    };
    link: ({ disabled }: LinkProps) => {
        display: string;
        color: string;
        transition: string;
        cursor: string;
        '& svg': {
            fill: string;
        };
        '&:hover': {
            color: string;
            '& svg': {
                fill: string;
            };
        };
        '&:active': {
            color: string;
            outline: string;
            '& svg': {
                fill: string;
            };
        };
        '&:focus': {
            color: string;
        };
    };
    input: ({ invalid, disabled, radius, color, inline, compact }: InputProps) => {
        fontFamily: "-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, \"Helvetica Neue\",  Arial, sans-serif";
        fontSize: number;
        outline: string;
        color: string;
        opacity: number;
        backgroundColor: string;
        borderWidth: string;
        borderStyle: string;
        borderColor: string;
        borderRadius: any;
        transition: string;
        '&:hover': {
            borderColor?: string | undefined;
        };
        '&:active': {
            borderColor?: string | undefined;
        };
        '&::placeholder': {
            color: string;
        };
    };
};
export default _default;
