function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DropdownRegistry =
/*#__PURE__*/
function () {
  function DropdownRegistry() {
    _classCallCheck(this, DropdownRegistry);

    this._links = [];
    this._currentFocusIndex = -1;
  }

  _createClass(DropdownRegistry, [{
    key: "addChild",
    value: function addChild(child) {
      this._links.push(child);
    }
  }, {
    key: "removeChild",
    value: function removeChild(child) {
      this._links.splice(this._links.indexOf(child), 1);
    }
  }, {
    key: "_focusChildAt",
    value: function _focusChildAt(index) {
      if (this._links[index]) {
        this._links[index].focus();
      }
    }
  }, {
    key: "focusNext",
    value: function focusNext() {
      this._focusChildAt(this._currentFocusIndex + 1);
    }
  }, {
    key: "focusPrev",
    value: function focusPrev() {
      this._focusChildAt(this._currentFocusIndex - 1);
    }
  }, {
    key: "setFocusedChild",
    value: function setFocusedChild(child) {
      this._currentFocusIndex = this._links.indexOf(child);
    }
  }, {
    key: "removeFocusedChild",
    value: function removeFocusedChild() {
      this._currentFocusIndex = -1;
    }
  }]);

  return DropdownRegistry;
}();

export { DropdownRegistry as default };