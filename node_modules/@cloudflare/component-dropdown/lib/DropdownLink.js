"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _componentLink = require("@cloudflare/component-link");

var _styleContainer = require("@cloudflare/style-container");

var _DropdownRegistry = _interopRequireDefault(require("./DropdownRegistry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var styled = function styled(_ref) {
  var disabled = _ref.disabled,
      theme = _ref.theme;
  return {
    position: 'relative',
    zIndex: 1,
    '&:first-child': {
      borderTopWidth: 0
    },
    '& > a': {
      display: 'block',
      paddingTop: theme.space[1],
      paddingBottom: theme.space[1],
      paddingLeft: theme.space[3],
      paddingRight: theme.space[3],
      cursor: disabled ? 'default' : 'pointer',
      whiteSpace: 'nowrap',
      '&:hover': {
        color: disabled ? theme.colors.gray[4] : theme.colors.white,
        background: disabled ? theme.colors.white : theme.colors.blue[4]
      },
      '&:focus': {
        color: disabled ? theme.colors.gray[4] : theme.colors.white,
        background: disabled ? theme.colors.white : theme.colors.blue[6],
        outline: '5px auto -webkit-focus-ring-color',
        outlineOffset: '-1px'
      },
      '&:active': {
        color: theme.colors.white,
        background: theme.colors.blue[4]
      }
    }
  };
};

var DropdownLink =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DropdownLink, _React$Component);

  function DropdownLink(props, context) {
    var _this;

    _classCallCheck(this, DropdownLink);

    if (!props.to && !props.onClick) {
      throw new Error('<DropdownLink/> requires either a `to` or `onClick` prop');
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropdownLink).call(this, props, context));
    _this.dropdownRegistry = context.dropdownRegistry;
    _this.handleLinkBlur = _this.handleLinkBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleLinkFocus = _this.handleLinkFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.focus = _this.focus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(DropdownLink, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.dropdownRegistry.addChild(this);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.dropdownRegistry.removeChild(this);
    }
  }, {
    key: "focus",
    value: function focus() {
      this.link.focus();
    }
  }, {
    key: "handleLinkFocus",
    value: function handleLinkFocus() {
      this.dropdownRegistry.setFocusedChild(this);
    }
  }, {
    key: "handleLinkBlur",
    value: function handleLinkBlur() {
      this.dropdownRegistry.removeFocusedChild();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return _react.default.createElement("li", {
        className: this.props.className,
        role: "menuitem"
      }, _react.default.createElement(_componentLink.Link, {
        innerRef: function innerRef(node) {
          return _this2.link = node;
        },
        to: this.props.to,
        onClick: this.props.onClick,
        onFocus: this.handleLinkFocus,
        onBlur: this.handleLinkBlur,
        disabled: this.props.disabled
      }, this.props.children));
    }
  }]);

  return DropdownLink;
}(_react.default.Component);

DropdownLink.propTypes = {
  disabled: _propTypes.default.bool,
  className: _propTypes.default.string,
  to: _propTypes.default.string,
  onClick: _propTypes.default.func,
  children: _propTypes.default.node
};
DropdownLink.contextTypes = {
  dropdownRegistry: _propTypes.default.instanceOf(_DropdownRegistry.default).isRequired
};
DropdownLink.displayName = 'DropdownLink';

var _default = (0, _styleContainer.createStyledComponent)(styled, DropdownLink);

exports.default = _default;