import { createRenderer as createFelaRenderer } from 'fela'; // eslint-disable-line behance/no-deprecated

import prefixer from 'fela-plugin-prefixer';
import fallbackValue from 'fela-plugin-fallback-value';
import unit from 'fela-plugin-unit';
import embedded from 'fela-plugin-embedded';
import namedKeys from 'fela-plugin-named-keys';
import { variables } from '@cloudflare/style-const'; // eslint-disable-line behance/no-deprecated

var defaultOpts = {
  dev: false
};
var mediaQueries = {
  mobile: "@media (min-width: ".concat(variables.breakpoints.mobile, ")"),
  mobileWide: "@media (min-width: ".concat(variables.breakpoints.mobileWide, ")"),
  mobileOnly: "@media (min-width: ".concat(variables.breakpoints.mobile, ") and (max-width: ").concat(variables.breakpoints.tablet, ")"),
  tablet: "@media (min-width: ".concat(variables.breakpoints.tablet, ")"),
  tabletLegacy: "@media (min-width: ".concat(variables.breakpoints.tabletLegacy, ")"),
  tabletWide: "@media (min-width: ".concat(variables.breakpoints.tabletWide, ")"),
  tabletOnly: "@media (min-width: ".concat(variables.breakpoints.tablet, ") and (max-width: ").concat(variables.breakpoints.desktop, ")"),
  desktop: "@media (min-width: ".concat(variables.breakpoints.desktop, ")"),
  desktopLegacy: "@media (min-width: ".concat(variables.breakpoints.desktopLegacy, ")"),
  desktopLarge: "@media (min-width: ".concat(variables.breakpoints.desktopLarge, ")"),
  hover: "@media (hover)"
};

var removePrefix = query => query.replace('@media ', '');

var createRenderer = opts => {
  var usedOpts = Object.assign({}, defaultOpts, opts);
  var plugins = [prefixer(), fallbackValue(), unit(), embedded(), namedKeys(mediaQueries)];
  var enhancers = [];

  if (process.env.NODE_ENV === 'development' && usedOpts.dev === true) {
    var validator = require('fela-plugin-validator').default;

    plugins.push(validator());
  }

  return createFelaRenderer({
    plugins,
    enhancers,
    selectorPrefix: usedOpts.selectorPrefix,
    devMode: process.env.NODE_ENV === 'development' && usedOpts.dev,
    mediaQueryOrder: [removePrefix(mediaQueries.hover), removePrefix(mediaQueries.mobile), removePrefix(mediaQueries.mobileWide), removePrefix(mediaQueries.tablet), removePrefix(mediaQueries.tabletLegacy), removePrefix(mediaQueries.tabletWide), removePrefix(mediaQueries.desktop), removePrefix(mediaQueries.desktopLegacy), removePrefix(mediaQueries.desktopLarge)]
  });
};

export default createRenderer;