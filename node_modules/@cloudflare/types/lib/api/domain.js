"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResendDomainProtectionEmailRequest = exports.DomainProtectionPostResult = exports.DomainProtectionData = exports.DomainProtectionConfig = exports.DomainProtectionConfigStatus = exports.DomainProtectionDesignatedApprovers = exports.DesignatedApprover = exports.ApproverStatus = exports.DomainEligibility = exports.DomainSearchResult = exports.GetDomainsResult = exports.DomainExists = exports.Domain = exports.DomainProtectionStatus = exports.DomainFees = exports.RegistrationSettings = exports.RegistrantContacts = exports.RegistrantContact = exports.LandingSettings = exports.RegistrationStatus = void 0;

var _utilEnGarde = require("@cloudflare/util-en-garde");

var RegistrationStatus = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('registrationPendingAuthorization'), _utilEnGarde.eg.literal('registrationPendingZoneCreate'), _utilEnGarde.eg.literal('registrationPendingRegister'), _utilEnGarde.eg.literal('registrationPendingZoneActivate'), _utilEnGarde.eg.literal('registrationPendingSettlement'), _utilEnGarde.eg.literal('registrationFailedAuthorization'), _utilEnGarde.eg.literal('registrationFailedQuote'), _utilEnGarde.eg.literal('registrationFailedRegister'), _utilEnGarde.eg.literal('registrationFailedZoneCreate'), _utilEnGarde.eg.literal('registrationFailedZoneActivate'), _utilEnGarde.eg.literal('registrationFailedSettlement'), _utilEnGarde.eg.literal('registrationActive'), _utilEnGarde.eg.literal('expiredParked'), _utilEnGarde.eg.literal('deletionInitiated'), _utilEnGarde.eg.literal('deletionIrredeemable'), _utilEnGarde.eg.literal('domainTerminated'), _utilEnGarde.eg.literal('domainLocked')]);

exports.RegistrationStatus = RegistrationStatus;

var LandingSettings = _utilEnGarde.eg.object({
  eligible: _utilEnGarde.eg.boolean,
  enabled: _utilEnGarde.eg.boolean.optional
});

exports.LandingSettings = LandingSettings;

var RegistrantContact = _utilEnGarde.eg.object({
  address: _utilEnGarde.eg.string,
  address2: _utilEnGarde.eg.string,
  city: _utilEnGarde.eg.string,
  country: _utilEnGarde.eg.string,
  email: _utilEnGarde.eg.string,
  fax: _utilEnGarde.eg.string,
  first_name: _utilEnGarde.eg.string,
  id: _utilEnGarde.eg.string.optional,
  label: _utilEnGarde.eg.union([_utilEnGarde.eg.null, _utilEnGarde.eg.string]).optional,
  last_name: _utilEnGarde.eg.string,
  organization: _utilEnGarde.eg.string,
  phone: _utilEnGarde.eg.string,
  state: _utilEnGarde.eg.string,
  zip: _utilEnGarde.eg.string
});

exports.RegistrantContact = RegistrantContact;

var TransferConditions = _utilEnGarde.eg.object({
  exists: _utilEnGarde.eg.boolean,
  not_premium: _utilEnGarde.eg.boolean,
  not_secure: _utilEnGarde.eg.boolean,
  not_started: _utilEnGarde.eg.boolean,
  not_waiting: _utilEnGarde.eg.boolean,
  supported_tld: _utilEnGarde.eg.boolean
});

var RegistrantContacts = _utilEnGarde.eg.object({
  registrant: RegistrantContact.optional,
  technical: RegistrantContact.optional,
  administrator: RegistrantContact.optional,
  billing: RegistrantContact.optional
});

exports.RegistrantContacts = RegistrantContacts;

var RegistrationSettings = _utilEnGarde.eg.object({
  auto_renew: _utilEnGarde.eg.boolean,
  privacy: _utilEnGarde.eg.boolean,
  contacts: RegistrantContacts.optional,
  years: _utilEnGarde.eg.number
});

exports.RegistrationSettings = RegistrationSettings;

var DomainFees = _utilEnGarde.eg.object({
  icann_fee: _utilEnGarde.eg.number,
  redemption_fee: _utilEnGarde.eg.number,
  registration_fee: _utilEnGarde.eg.number,
  renewal_fee: _utilEnGarde.eg.number,
  transfer_fee: _utilEnGarde.eg.number
});

exports.DomainFees = DomainFees;
var DomainProtectionStatus;
exports.DomainProtectionStatus = DomainProtectionStatus;

(function (DomainProtectionStatus) {
  DomainProtectionStatus["ONBOARDING_INITIATED"] = "Onboarding Initiated";
  DomainProtectionStatus["ONBOARDED"] = "Onboarded";
  DomainProtectionStatus["PENDING_REGISTRY_LOCK"] = "Pending Registry Lock";
  DomainProtectionStatus["PENDING_REGISTRY_UNLOCK"] = "Pending Registry Unlock";
  DomainProtectionStatus["REGISTRY_UNLOCKED"] = "Registry Unlocked";
  DomainProtectionStatus["LOCKED"] = "Locked";
  DomainProtectionStatus["FAILED_TO_LOCK"] = "Failed To Lock";
  DomainProtectionStatus["PENDING_UNLOCK_APPROVAL"] = "Pending Unlock Approval";
  DomainProtectionStatus["UNLOCKED"] = "Unlocked";
  DomainProtectionStatus["OFFBOARDED"] = "Offboarded";
})(DomainProtectionStatus || (exports.DomainProtectionStatus = DomainProtectionStatus = {}));

var Domain = _utilEnGarde.eg.object({
  administrator_contact: _utilEnGarde.eg.unknown.optional,
  auto_renew: _utilEnGarde.eg.boolean.optional,
  available: _utilEnGarde.eg.boolean,
  billing_contact: _utilEnGarde.eg.unknown.optional,
  can_register: _utilEnGarde.eg.boolean,
  cloudflare_dns: _utilEnGarde.eg.boolean.optional,
  cloudflare_registration: _utilEnGarde.eg.boolean.optional,
  contacts_updated_at: _utilEnGarde.eg.string.optional,
  created_at: _utilEnGarde.eg.string.optional,
  created_registrar: _utilEnGarde.eg.string.optional,
  current_registrar: _utilEnGarde.eg.string.optional,
  domain_protection_services: _utilEnGarde.eg.object({
    status: _utilEnGarde.eg.enum(DomainProtectionStatus).optional
  }).optional,
  dns: _utilEnGarde.eg.array(_utilEnGarde.eg.any).optional,
  ds_records: _utilEnGarde.eg.array(_utilEnGarde.eg.any).optional,
  expires_at: _utilEnGarde.eg.string.optional,
  fees: DomainFees,
  last_known_status: _utilEnGarde.eg.union([RegistrationStatus, _utilEnGarde.eg.null]).optional,
  locked: _utilEnGarde.eg.boolean.optional,
  name: _utilEnGarde.eg.string,
  name_servers: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional,
  landing: _utilEnGarde.eg.union([LandingSettings, _utilEnGarde.eg.boolean]).optional,
  partner_response: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]).optional,
  payment_expires_at: _utilEnGarde.eg.string.optional,
  pending_transfer: _utilEnGarde.eg.boolean.optional,
  permissions: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  previous_registrar: _utilEnGarde.eg.unknown.optional,
  privacy: _utilEnGarde.eg.boolean.optional,
  registrant_contact: _utilEnGarde.eg.union([RegistrantContact, _utilEnGarde.eg.null]).optional,
  registry_object_id: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]).optional,
  registry_statuses: _utilEnGarde.eg.string.optional,
  supported_tld: _utilEnGarde.eg.boolean.optional,
  technical_contact: _utilEnGarde.eg.unknown.optional,
  transfer_conditions: TransferConditions.optional,
  updated_at: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]).optional,
  updated_registrar: _utilEnGarde.eg.string.optional,
  using_created_registrar_nameservers: _utilEnGarde.eg.boolean.optional,
  using_current_registrar_nameservers: _utilEnGarde.eg.boolean.optional,
  using_previous_registrar_nameservers: _utilEnGarde.eg.boolean.optional,
  using_updated_registrar_nameservers: _utilEnGarde.eg.boolean.optional,
  whois: _utilEnGarde.eg.unknown.optional
});

exports.Domain = Domain;

var DomainExists = _utilEnGarde.eg.object({
  available: _utilEnGarde.eg.boolean
});

exports.DomainExists = DomainExists;

var GetDomainsResult = _utilEnGarde.eg.object({
  result: _utilEnGarde.eg.array(Domain),
  result_info: _utilEnGarde.eg.object({
    count: _utilEnGarde.eg.number,
    page: _utilEnGarde.eg.number,
    per_page: _utilEnGarde.eg.number,
    total_count: _utilEnGarde.eg.number
  }),
  errors: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  messages: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  success: _utilEnGarde.eg.boolean
});

exports.GetDomainsResult = GetDomainsResult;

var DomainSearchResult = _utilEnGarde.eg.object({
  check_result: _utilEnGarde.eg.union([_utilEnGarde.eg.null, _utilEnGarde.eg.object({
    name: _utilEnGarde.eg.string,
    supported_tld: _utilEnGarde.eg.boolean,
    premium: _utilEnGarde.eg.boolean,
    available: _utilEnGarde.eg.boolean,
    can_register: _utilEnGarde.eg.boolean
  })]).optional,
  domains: _utilEnGarde.eg.array(_utilEnGarde.eg.object({
    name: _utilEnGarde.eg.string,
    availability: _utilEnGarde.eg.string,
    price: _utilEnGarde.eg.number,
    icann_fee: _utilEnGarde.eg.number,
    pricing: _utilEnGarde.eg.object({
      currency: _utilEnGarde.eg.string,
      registration_fee: _utilEnGarde.eg.number,
      renewal_fee: _utilEnGarde.eg.number
    }),
    pricing_local: _utilEnGarde.eg.object({
      currency: _utilEnGarde.eg.string,
      registration_fee: _utilEnGarde.eg.number,
      renewal_fee: _utilEnGarde.eg.number
    })
  }))
});

exports.DomainSearchResult = DomainSearchResult;

var DomainEligibility = _utilEnGarde.eg.object({
  name: _utilEnGarde.eg.string,
  can_register: _utilEnGarde.eg.union([_utilEnGarde.eg.boolean, _utilEnGarde.eg.null]),
  supported_tld: _utilEnGarde.eg.union([_utilEnGarde.eg.boolean, _utilEnGarde.eg.null]),
  premium: _utilEnGarde.eg.union([_utilEnGarde.eg.boolean, _utilEnGarde.eg.null]),
  available: _utilEnGarde.eg.union([_utilEnGarde.eg.boolean, _utilEnGarde.eg.null])
});

exports.DomainEligibility = DomainEligibility;
// Domain Protection services
var ApproverStatus;
exports.ApproverStatus = ApproverStatus;

(function (ApproverStatus) {
  ApproverStatus["PENDING"] = "pending";
  ApproverStatus["VERIFIED"] = "verified";
  ApproverStatus["REJECTED"] = "rejected";
  ApproverStatus["PENDING_DELETE"] = "pending_delete";
  ApproverStatus["DELETED"] = "deleted";
})(ApproverStatus || (exports.ApproverStatus = ApproverStatus = {}));

var DesignatedApprover = _utilEnGarde.eg.object({
  email: _utilEnGarde.eg.string,
  status: _utilEnGarde.eg.enum(ApproverStatus),
  first_name: _utilEnGarde.eg.union([_utilEnGarde.eg.null, _utilEnGarde.eg.string]).optional,
  last_name: _utilEnGarde.eg.union([_utilEnGarde.eg.null, _utilEnGarde.eg.string]).optional,
  phone_number: _utilEnGarde.eg.union([_utilEnGarde.eg.null, _utilEnGarde.eg.string]).optional
});

exports.DesignatedApprover = DesignatedApprover;

var DomainProtectionDesignatedApprovers = _utilEnGarde.eg.object({
  designated_approvers: _utilEnGarde.eg.array(DesignatedApprover)
});

exports.DomainProtectionDesignatedApprovers = DomainProtectionDesignatedApprovers;
var DomainProtectionConfigStatus;
exports.DomainProtectionConfigStatus = DomainProtectionConfigStatus;

(function (DomainProtectionConfigStatus) {
  DomainProtectionConfigStatus["PENDING"] = "pending";
  DomainProtectionConfigStatus["PENDING_UPDATE"] = "pending_update";
  DomainProtectionConfigStatus["ENABLED"] = "enabled";
  DomainProtectionConfigStatus["DISABLED"] = "disabled";
})(DomainProtectionConfigStatus || (exports.DomainProtectionConfigStatus = DomainProtectionConfigStatus = {}));

var DomainProtectionConfig = _utilEnGarde.eg.object({
  auto_relock_after: _utilEnGarde.eg.number,
  number_of_designated_approvers: _utilEnGarde.eg.number,
  status: _utilEnGarde.eg.enum(DomainProtectionConfigStatus)
});

exports.DomainProtectionConfig = DomainProtectionConfig;

var DomainProtectionData = _utilEnGarde.eg.intersection([DomainProtectionConfig, DomainProtectionDesignatedApprovers]);

exports.DomainProtectionData = DomainProtectionData;

var DomainProtectionPostResult = _utilEnGarde.eg.object({
  status: _utilEnGarde.eg.number,
  message: _utilEnGarde.eg.string
});

exports.DomainProtectionPostResult = DomainProtectionPostResult;
var ResendDomainProtectionEmailRequest;
exports.ResendDomainProtectionEmailRequest = ResendDomainProtectionEmailRequest;

(function (ResendDomainProtectionEmailRequest) {
  ResendDomainProtectionEmailRequest["UNLOCK_APPROVAL"] = "UnlockApprovalRequest";
  ResendDomainProtectionEmailRequest["CONFIGURATION_UPDATE"] = "ConfigurationUpdateRequest";
  ResendDomainProtectionEmailRequest["APPROVER_EMAIL_VERIFICATION"] = "DesignatedApproverVerificationRequest";
  ResendDomainProtectionEmailRequest["APPROVER_REMOVAL"] = "DesignatedApproverRemovalRequest";
})(ResendDomainProtectionEmailRequest || (exports.ResendDomainProtectionEmailRequest = ResendDomainProtectionEmailRequest = {}));