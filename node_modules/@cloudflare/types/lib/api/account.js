"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountFirewallRulesetHTTPApplication = exports.AccountFirewallRulesetOverride = exports.AccountFirewallRuleset = exports.AccountFirewallRulesetKind = exports.AccountFirewallRuleHTTPApplication = exports.AccountFirewallRuleOverride = exports.AccountFirewallRule = exports.AccountFirewallSensitivityLevels = exports.AccountFirewallRuleAction = exports.AccountLegoContract = exports.AccountLegoContactAPI = exports.AccountLegoContact = exports.AccountLegoProduct = exports.AccountSubscriptionType = exports.AccountLegoState = exports.Account = exports.AccountInvite = exports.AccountWebhook = exports.WebhookEvent = exports.AccountMember = exports.AccountMemberPolicy = exports.AccountMemberPermissionGroup = exports.AccountMemberResourceGroup = exports.AccountRole = exports.AccountQuota = exports.AccountQuotaValues = exports.AccountLegacyFlags = exports.AccountLegacyFlagEnterpriseZoneQuota = exports.AccountLegacyFlagStatus = exports.AccountMeta = exports.AccountSettings = void 0;

var _user = require("./user");

var _permissions = require("./permissions");

var _utilEnGarde = require("@cloudflare/util-en-garde");

var _policy = require("./policy");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var AccountSettings = _utilEnGarde.eg.object({
  access_approval_expiry: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]),
  enforce_twofactor: _utilEnGarde.eg.boolean,
  api_access_enabled: _utilEnGarde.eg.boolean
});

exports.AccountSettings = AccountSettings;

var AccountMeta = _utilEnGarde.eg.object({
  has_pro_zones: _utilEnGarde.eg.boolean,
  has_business_zones: _utilEnGarde.eg.boolean,
  has_enterprise_zones: _utilEnGarde.eg.boolean
});

exports.AccountMeta = AccountMeta;

var AccountLegacyFlagStatus = _utilEnGarde.eg.object({
  enabled: _utilEnGarde.eg.boolean
});

exports.AccountLegacyFlagStatus = AccountLegacyFlagStatus;

var AccountLegacyFlagEnterpriseZoneQuota = _utilEnGarde.eg.object({
  maximum: _utilEnGarde.eg.number,
  current: _utilEnGarde.eg.number,
  available: _utilEnGarde.eg.number
});

exports.AccountLegacyFlagEnterpriseZoneQuota = AccountLegacyFlagEnterpriseZoneQuota;

var AccountLegacyFlags = _utilEnGarde.eg.object({
  railgun: AccountLegacyFlagStatus,
  dns_firewall: AccountLegacyFlagStatus,
  china_network_visible: AccountLegacyFlagStatus,
  china_private_key_network_deployment: AccountLegacyFlagStatus,
  cname_signup: AccountLegacyFlagStatus,
  custom_pages: AccountLegacyFlagStatus,
  enterprise_zone_quota: AccountLegacyFlagEnterpriseZoneQuota
});

exports.AccountLegacyFlags = AccountLegacyFlags;

var AccountQuotaValues = _utilEnGarde.eg.object({
  remaining: _utilEnGarde.eg.number,
  used: _utilEnGarde.eg.number
});

exports.AccountQuotaValues = AccountQuotaValues;

var AccountQuota = _utilEnGarde.eg.object({
  bulk_pro: AccountQuotaValues.optional,
  bulk_biz: AccountQuotaValues.optional,
  bulk_ent: AccountQuotaValues.optional
});

exports.AccountQuota = AccountQuota;

var AccountRole = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  description: _utilEnGarde.eg.string,
  permissions: _permissions.Permissions
});

exports.AccountRole = AccountRole;

var AccountMemberResourceGroup = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string.optional,
  metadata: _utilEnGarde.eg.object({
    editable: _utilEnGarde.eg.boolean
  })
});

exports.AccountMemberResourceGroup = AccountMemberResourceGroup;

var AccountMemberPermissionGroup = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string.optional
});

exports.AccountMemberPermissionGroup = AccountMemberPermissionGroup;

var AccountMemberPolicy = _utilEnGarde.eg.array(_utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string.optional,
  access: _utilEnGarde.eg.string,
  permission_groups: _utilEnGarde.eg.array(AccountMemberPermissionGroup),
  resource_groups: _utilEnGarde.eg.array(AccountMemberResourceGroup)
}));

exports.AccountMemberPolicy = AccountMemberPolicy;

var AccountMember = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  user: _utilEnGarde.eg.pick(_user.User, ['id', 'first_name', 'last_name', 'email', 'two_factor_authentication_enabled']),
  status: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('accepted'), _utilEnGarde.eg.literal('pending'), _utilEnGarde.eg.literal('rejected')]),
  api_access_enabled: _utilEnGarde.eg.union([_utilEnGarde.eg.boolean, _utilEnGarde.eg.null]).optional,
  roles: _utilEnGarde.eg.array(AccountRole),
  policies: _utilEnGarde.eg.array(_policy.MembershipsPolicy).optional
});

exports.AccountMember = AccountMember;

var WebhookEvent = _utilEnGarde.eg.object({
  'ssl.certificate.deletion.failed': _utilEnGarde.eg.boolean,
  'ssl.certificate.deletion.succeeded': _utilEnGarde.eg.boolean,
  'ssl.certificate.deployment.failed': _utilEnGarde.eg.boolean,
  'ssl.certificate.deployment.succeeded': _utilEnGarde.eg.boolean,
  'ssl.certificate.renewal.failed': _utilEnGarde.eg.boolean,
  'ssl.certificate.renewal.succeeded': _utilEnGarde.eg.boolean,
  'ssl.certificate.renewal.upcoming_certificate_expiration_notification': _utilEnGarde.eg.boolean,
  'ssl.certificate.validation.failed': _utilEnGarde.eg.boolean,
  'ssl.certificate.validation.succeeded': _utilEnGarde.eg.boolean,
  'ssl.custom_hostname_certificate.validation.failed': _utilEnGarde.eg.boolean,
  'ssl.custom_hostname_certificate.validation.succeeded': _utilEnGarde.eg.boolean,
  'ssl.dedicated_certificate.issuance.failed': _utilEnGarde.eg.boolean,
  'ssl.dedicated_certificate.issuance.succeeded': _utilEnGarde.eg.boolean
});

exports.WebhookEvent = WebhookEvent;

// Triggers incomplete
var AccountWebhook = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  category: _utilEnGarde.eg.string,
  triggers: _utilEnGarde.eg.any,
  url: _utilEnGarde.eg.string,
  secret: _utilEnGarde.eg.string,
  events: WebhookEvent
});

exports.AccountWebhook = AccountWebhook;

var AccountInvite = _utilEnGarde.eg.object({
  account_pubname: _utilEnGarde.eg.string,
  user_email: _utilEnGarde.eg.string
});

exports.AccountInvite = AccountInvite;

var Account = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  type: _utilEnGarde.eg.string.optional,
  created_on: _utilEnGarde.eg.string.optional,
  settings: AccountSettings,
  meta: AccountMeta,
  legacy_flags: AccountLegacyFlags
});

exports.Account = Account;

var AccountLegoState = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('pending'), _utilEnGarde.eg.literal('completed'), _utilEnGarde.eg.literal('signed'), _utilEnGarde.eg.literal('')]);

exports.AccountLegoState = AccountLegoState;

var AccountSubscriptionType = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('paygo'), _utilEnGarde.eg.literal('contract'), _utilEnGarde.eg.literal('')]);

exports.AccountSubscriptionType = AccountSubscriptionType;

var AccountLegoProduct = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('access'), _utilEnGarde.eg.literal('rate_limiting'), _utilEnGarde.eg.literal('load_balancing'), _utilEnGarde.eg.literal('stream'), _utilEnGarde.eg.literal('workers'), _utilEnGarde.eg.literal('r2'), _utilEnGarde.eg.literal('argo'), _utilEnGarde.eg.literal('bot_management'), _utilEnGarde.eg.literal('')]);

exports.AccountLegoProduct = AccountLegoProduct;

var AccountLegoContact = _utilEnGarde.eg.object({
  first_name: _utilEnGarde.eg.string,
  last_name: _utilEnGarde.eg.string,
  email: _utilEnGarde.eg.string,
  organization: _utilEnGarde.eg.string.optional
});

exports.AccountLegoContact = AccountLegoContact;

var AccountLegoContactAPI = _utilEnGarde.eg.object({
  contact: AccountLegoContact
});

exports.AccountLegoContactAPI = AccountLegoContactAPI;

var AccountLegoContract = _utilEnGarde.eg.object({
  lego_state: AccountLegoState.optional,
  subscription_type: AccountSubscriptionType.optional
});

exports.AccountLegoContract = AccountLegoContract;

var AccountFirewallRuleAction = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('allow'), _utilEnGarde.eg.literal('block'), _utilEnGarde.eg.literal('challenge'), _utilEnGarde.eg.literal('js_challenge'), _utilEnGarde.eg.literal('log'), _utilEnGarde.eg.literal('managed_challenge'), _utilEnGarde.eg.literal('skip'), _utilEnGarde.eg.literal('ddos_dynamic'), _utilEnGarde.eg.literal('select_config')]);

exports.AccountFirewallRuleAction = AccountFirewallRuleAction;

var AccountFirewallSensitivityLevels = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('default'), _utilEnGarde.eg.literal('medium'), _utilEnGarde.eg.literal('low'), _utilEnGarde.eg.literal('eoff')]);

exports.AccountFirewallSensitivityLevels = AccountFirewallSensitivityLevels;
var baseRuleProperties = {
  id: _utilEnGarde.eg.string,
  expression: _utilEnGarde.eg.string.optional,
  description: _utilEnGarde.eg.string.optional,
  version: _utilEnGarde.eg.string.optional,
  enabled: _utilEnGarde.eg.boolean.optional,
  last_updated: _utilEnGarde.eg.string.optional,
  ref: _utilEnGarde.eg.string.optional
};

var AccountFirewallRule = _utilEnGarde.eg.object(_objectSpread({}, baseRuleProperties, {
  action: AccountFirewallRuleAction,
  categories: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional,
  action_parameters: _utilEnGarde.eg.object({
    ruleset: _utilEnGarde.eg.string.optional
  }).optional,
  score_threshold: _utilEnGarde.eg.number.optional,
  created: _utilEnGarde.eg.string.optional,
  allowed_override_actions: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional
}));

exports.AccountFirewallRule = AccountFirewallRule;

var CategoryOverride = _utilEnGarde.eg.object({
  category: _utilEnGarde.eg.string,
  action: AccountFirewallRuleAction.optional,
  enabled: _utilEnGarde.eg.boolean.optional,
  sensitivity_level: AccountFirewallSensitivityLevels.optional
});

var RuleOverride = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  action: AccountFirewallRuleAction.optional,
  enabled: _utilEnGarde.eg.boolean.optional,
  sensitivity_level: AccountFirewallSensitivityLevels.optional
});

var AccountFirewallRuleOverride = _utilEnGarde.eg.object(_objectSpread({}, baseRuleProperties, {
  action: _utilEnGarde.eg.literal('execute'),
  action_parameters: _utilEnGarde.eg.object({
    id: _utilEnGarde.eg.string,
    version: _utilEnGarde.eg.string.optional,
    matched_data: _utilEnGarde.eg.object({
      public_key: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null])
    }).optional,
    overrides: _utilEnGarde.eg.object({
      action: AccountFirewallRuleAction.optional,
      enabled: _utilEnGarde.eg.boolean.optional,
      categories: _utilEnGarde.eg.array(CategoryOverride).optional,
      rules: _utilEnGarde.eg.array(RuleOverride).optional,
      sensitivity_level: AccountFirewallSensitivityLevels.optional
    }).optional,
    increment: _utilEnGarde.eg.number.optional
  })
}));

exports.AccountFirewallRuleOverride = AccountFirewallRuleOverride;

// Bypass rules/rulesets with skip action: https://wiki.cfops.it/x/bodSF
var AccountFirewallRuleSkipOverride = _utilEnGarde.eg.object(_objectSpread({}, baseRuleProperties, {
  action: _utilEnGarde.eg.literal('skip'),
  action_parameters: _utilEnGarde.eg.object({
    rulesets: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional,
    ruleset: _utilEnGarde.eg.literal('current').optional,
    rules: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.array(_utilEnGarde.eg.string)).optional
  }),
  logging: _utilEnGarde.eg.object({
    enabled: _utilEnGarde.eg.boolean
  }).optional
}));

var AccountFirewallRuleHTTPApplication = _utilEnGarde.eg.object(_objectSpread({}, baseRuleProperties, {
  action: _utilEnGarde.eg.literal('select_config'),
  position: _utilEnGarde.eg.object({
    index: _utilEnGarde.eg.number,
    after: _utilEnGarde.eg.string,
    before: _utilEnGarde.eg.string
  }),
  action_parameters: _utilEnGarde.eg.object({
    http_application: _utilEnGarde.eg.string,
    version: _utilEnGarde.eg.number,
    lock_by_default: _utilEnGarde.eg.boolean
  })
}));

exports.AccountFirewallRuleHTTPApplication = AccountFirewallRuleHTTPApplication;

var AccountFirewallRulesetKind = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('root'), _utilEnGarde.eg.literal('managed'), _utilEnGarde.eg.literal('custom')]);

exports.AccountFirewallRulesetKind = AccountFirewallRulesetKind;

var AccountFirewallRuleset = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  description: _utilEnGarde.eg.string,
  kind: AccountFirewallRulesetKind,
  version: _utilEnGarde.eg.string,
  last_updated: _utilEnGarde.eg.string,
  rules: _utilEnGarde.eg.array(AccountFirewallRule).optional,
  phase: _utilEnGarde.eg.string.optional
});

exports.AccountFirewallRuleset = AccountFirewallRuleset;

var AccountFirewallRulesetOverride = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  description: _utilEnGarde.eg.string,
  kind: AccountFirewallRulesetKind,
  phase: _utilEnGarde.eg.string.optional,
  version: _utilEnGarde.eg.string,
  last_updated: _utilEnGarde.eg.string,
  rules: _utilEnGarde.eg.array(_utilEnGarde.eg.union([AccountFirewallRuleOverride, AccountFirewallRuleSkipOverride])).optional
});

exports.AccountFirewallRulesetOverride = AccountFirewallRulesetOverride;

var AccountFirewallRulesetHTTPApplication = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  description: _utilEnGarde.eg.string,
  kind: AccountFirewallRulesetKind,
  phase: _utilEnGarde.eg.string.optional,
  version: _utilEnGarde.eg.string,
  last_updated: _utilEnGarde.eg.string,
  rules: _utilEnGarde.eg.array(AccountFirewallRuleHTTPApplication)
});

exports.AccountFirewallRulesetHTTPApplication = AccountFirewallRulesetHTTPApplication;

var RuleRateLimit = _utilEnGarde.eg.object({
  characteristics: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  period: _utilEnGarde.eg.number,
  requests_per_period: _utilEnGarde.eg.number,
  mitigation_timeout: _utilEnGarde.eg.number,
  requests_to_origin: _utilEnGarde.eg.boolean,
  counting_expression: _utilEnGarde.eg.string
}); // Common properties across all rules.


var BaseRule = _utilEnGarde.eg.object({
  description: _utilEnGarde.eg.string,
  enabled: _utilEnGarde.eg.boolean,
  id: _utilEnGarde.eg.string.optional,
  last_updated: _utilEnGarde.eg.string.optional,
  version: _utilEnGarde.eg.string.optional,
  expression: _utilEnGarde.eg.string.optional,
  ratelimit: RuleRateLimit.optional,
  action: _utilEnGarde.eg.string.optional,
  action_parameters: _utilEnGarde.eg.object({
    id: _utilEnGarde.eg.string,
    version: _utilEnGarde.eg.string
  }).optional
}); // Common properties across all rulesets.


var BaseRuleset = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  description: _utilEnGarde.eg.string,
  version: _utilEnGarde.eg.string,
  last_updated: _utilEnGarde.eg.string,
  enabled: _utilEnGarde.eg.boolean
}); // Properties unique to phase http_request_firewall_custom of kind root.


var AccountCustomRulesetEntrypoint = _utilEnGarde.eg.intersection([BaseRuleset, _utilEnGarde.eg.object({
  kind: _utilEnGarde.eg.literal('root'),
  phase: _utilEnGarde.eg.literal('http_request_firewall_custom'),
  rules: _utilEnGarde.eg.array(_utilEnGarde.eg.intersection([BaseRule, _utilEnGarde.eg.object({
    action: _utilEnGarde.eg.literal('execute'),
    action_parameters: _utilEnGarde.eg.object({
      id: _utilEnGarde.eg.string,
      version: _utilEnGarde.eg.string,
      // TODO: set override type
      override: _utilEnGarde.eg.any.optional,
      matched_data: _utilEnGarde.eg.object({
        public_key: _utilEnGarde.eg.string
      }).optional
    }),
    expression: _utilEnGarde.eg.string
  })])).optional
})]);

// Properties unique to phase 'http_request_firewall_managed' of kind root.
var AccountManagedEntrypoint = _utilEnGarde.eg.intersection([BaseRuleset, _utilEnGarde.eg.object({
  kind: _utilEnGarde.eg.literal('root'),
  phase: _utilEnGarde.eg.literal('http_request_firewall_managed'),
  rules: _utilEnGarde.eg.array(_utilEnGarde.eg.intersection([BaseRule, _utilEnGarde.eg.object({
    action: _utilEnGarde.eg.literal('execute'),
    action_parameters: _utilEnGarde.eg.object({
      id: _utilEnGarde.eg.string,
      version: _utilEnGarde.eg.string
    }),
    expression: _utilEnGarde.eg.string
  })])).optional
})]);

var CustomRuleActions = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('managed_challenge'), _utilEnGarde.eg.literal('log'), _utilEnGarde.eg.literal('block'), _utilEnGarde.eg.literal('js_challenge'), _utilEnGarde.eg.literal('skip'), _utilEnGarde.eg.literal('challenge')]); // Properties unique to phase http_request_firewall_custom of kind custom.


var AccountCustomRuleset = _utilEnGarde.eg.intersection([BaseRuleset, _utilEnGarde.eg.object({
  kind: _utilEnGarde.eg.literal('custom'),
  phase: _utilEnGarde.eg.literal('http_request_firewall_custom'),
  rules: _utilEnGarde.eg.array(_utilEnGarde.eg.intersection([_utilEnGarde.eg.object({
    action: CustomRuleActions
  }), BaseRule]))
})]);

// Properties unique to phase http_ratelimit of kind custom.
var AccountRateLimitingRuleset = _utilEnGarde.eg.intersection([BaseRuleset, _utilEnGarde.eg.object({
  kind: _utilEnGarde.eg.literal('custom'),
  phase: _utilEnGarde.eg.literal('http_ratelimit'),
  rules: _utilEnGarde.eg.array(_utilEnGarde.eg.intersection([_utilEnGarde.eg.object({
    action: CustomRuleActions,
    ratelimit: RuleRateLimit
  }), BaseRule]))
})]);

var AccountIDSRuleset = _utilEnGarde.eg.intersection([BaseRuleset, _utilEnGarde.eg.object({
  kind: _utilEnGarde.eg.literal('managed'),
  phase: _utilEnGarde.eg.literal('magic_transit_ids_managed'),
  rules: _utilEnGarde.eg.array(_utilEnGarde.eg.intersection([_utilEnGarde.eg.object({
    action: _utilEnGarde.eg.literal('execute'),
    action_parameters: _utilEnGarde.eg.object({
      id: _utilEnGarde.eg.string,
      version: _utilEnGarde.eg.string
    })
  }), BaseRule]))
})]);

var AccountIDSEntrypoint = _utilEnGarde.eg.intersection([BaseRuleset, _utilEnGarde.eg.object({
  kind: _utilEnGarde.eg.literal('root'),
  phase: _utilEnGarde.eg.literal('magic_transit_ids_managed'),
  rules: _utilEnGarde.eg.array(_utilEnGarde.eg.intersection([_utilEnGarde.eg.object({
    id: _utilEnGarde.eg.string,
    action: _utilEnGarde.eg.literal('execute'),
    action_parameters: _utilEnGarde.eg.object({
      id: _utilEnGarde.eg.string,
      version: _utilEnGarde.eg.string
    })
  }), BaseRule]))
})]);

var GenericRuleset = _utilEnGarde.eg.union([AccountRateLimitingRuleset, AccountCustomRulesetEntrypoint, AccountCustomRuleset, AccountIDSRuleset, AccountManagedEntrypoint, AccountIDSEntrypoint]);