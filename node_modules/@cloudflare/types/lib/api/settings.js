"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Settings = exports.SettingsId = void 0;

var _utilEnGarde = require("@cloudflare/util-en-garde");

var SettingsId = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('advanced_ddos'), _utilEnGarde.eg.literal('always_online'), _utilEnGarde.eg.literal('always_use_https'), _utilEnGarde.eg.literal('automatic_https_rewrites'), _utilEnGarde.eg.literal('brotli'), _utilEnGarde.eg.literal('browser_cache_ttl'), _utilEnGarde.eg.literal('browser_check'), _utilEnGarde.eg.literal('cache_level'), _utilEnGarde.eg.literal('challenge_ttl'), _utilEnGarde.eg.literal('cname_flattening'), _utilEnGarde.eg.literal('development_mode'), _utilEnGarde.eg.literal('early_hints'), _utilEnGarde.eg.literal('edge_cache_ttl'), _utilEnGarde.eg.literal('email_obfuscation'), _utilEnGarde.eg.literal('hotlink_protection'), _utilEnGarde.eg.literal('http2'), _utilEnGarde.eg.literal('ip_geolocation'), _utilEnGarde.eg.literal('ipv6'), _utilEnGarde.eg.literal('max_upload'), _utilEnGarde.eg.literal('min_tls_version'), _utilEnGarde.eg.literal('minify'), _utilEnGarde.eg.literal('mirage'), _utilEnGarde.eg.literal('mobile_redirect'), _utilEnGarde.eg.literal('opportunistic_encryption'), _utilEnGarde.eg.literal('opportunistic_onion'), _utilEnGarde.eg.literal('origin_error_page_pass_thru'), _utilEnGarde.eg.literal('polish'), _utilEnGarde.eg.literal('prefetch_preload'), _utilEnGarde.eg.literal('privacy_pass'), _utilEnGarde.eg.literal('pseudo_ipv4'), _utilEnGarde.eg.literal('response_buffering'), _utilEnGarde.eg.literal('rocket_loader'), _utilEnGarde.eg.literal('security_header'), _utilEnGarde.eg.literal('security_level'), _utilEnGarde.eg.literal('server_side_exclude'), _utilEnGarde.eg.literal('sha1_support'), _utilEnGarde.eg.literal('sort_query_string_for_cache'), _utilEnGarde.eg.literal('ssl'), _utilEnGarde.eg.literal('tls_1_2_only'), _utilEnGarde.eg.literal('tls_1_3'), _utilEnGarde.eg.literal('tls_client_auth'), _utilEnGarde.eg.literal('true_client_ip_header'), _utilEnGarde.eg.literal('waf'), _utilEnGarde.eg.literal('webp'), _utilEnGarde.eg.literal('websockets')]);

exports.SettingsId = SettingsId;

// TODO: strongly type extra props to only settings which contain them. E.g. only 'development_mode' contains 'time_remaining'
// See https://bitbucket.cfdata.org/projects/WWW/repos/api-docs/browse/schemas/client/definitions/zone.json#64,460-461 and the zone settings API for details
var Settings = _utilEnGarde.eg.object({
  id: SettingsId,
  value: _utilEnGarde.eg.any,
  modified_on: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]),
  editable: _utilEnGarde.eg.boolean,
  v2: _utilEnGarde.eg.string.optional,
  // for 'always_online'
  time_remaining: _utilEnGarde.eg.string.optional,
  // for 'development_mode',
  certificate_status: _utilEnGarde.eg.string.optional,
  // for 'ssl'
  validation_errors: _utilEnGarde.eg.array(_utilEnGarde.eg.any).optional // for 'ssl'

});

exports.Settings = Settings;