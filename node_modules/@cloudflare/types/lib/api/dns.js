"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegionalHostnames = exports.RegionalHostname = exports.HostnameRegions = exports.DNSOutgoingZoneTransfers = exports.ZonePeerConfig = exports.DNSPeer = exports.DNSTsig = exports.DNSAcl = exports.DNSFirewallCluster = exports.DNSRecord = exports.DNSRecordMeta = void 0;

var _utilEnGarde = require("@cloudflare/util-en-garde");

var _zone = require("./zone");

var DNSRecordMeta = _utilEnGarde.eg.object({
  auto_added: _utilEnGarde.eg.boolean,
  custom_nameserver: _utilEnGarde.eg.boolean.optional,
  email_routing: _utilEnGarde.eg.boolean.optional,
  fallback_origin: _utilEnGarde.eg.boolean.optional,
  managed_by_apps: _utilEnGarde.eg.boolean,
  managed_by_argo_tunnel: _utilEnGarde.eg.boolean,
  managed_by_registrar: _utilEnGarde.eg.boolean.optional,
  managed_by_web3: _utilEnGarde.eg.boolean,
  managed_cname: _utilEnGarde.eg.boolean.optional,
  read_only: _utilEnGarde.eg.boolean.optional,
  shopify: _utilEnGarde.eg.boolean.optional,
  source: _utilEnGarde.eg.string.optional,
  origin_worker_id: _utilEnGarde.eg.string.optional,
  r2_bucket: _utilEnGarde.eg.string.optional
});

exports.DNSRecordMeta = DNSRecordMeta;

var DNSRecord = _utilEnGarde.eg.object({
  content: _utilEnGarde.eg.string.optional,
  created_on: _utilEnGarde.eg.string.optional,
  id: _utilEnGarde.eg.string.optional,
  // Secondary DNS records do not have ids
  data: _utilEnGarde.eg.any.optional,
  locked: _utilEnGarde.eg.boolean.optional,
  meta: DNSRecordMeta.optional,
  // May not always exist (DNS-7417)
  modified_on: _utilEnGarde.eg.string.optional,
  name: _utilEnGarde.eg.string,
  priority: _utilEnGarde.eg.number.optional,
  proxiable: _utilEnGarde.eg.boolean.optional,
  proxied: _utilEnGarde.eg.boolean.optional,
  ttl: _utilEnGarde.eg.number,
  type: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('A'), _utilEnGarde.eg.literal('AAAA'), _utilEnGarde.eg.literal('CNAME'), _utilEnGarde.eg.literal('CAA'), _utilEnGarde.eg.literal('CERT'), _utilEnGarde.eg.literal('DNSKEY'), _utilEnGarde.eg.literal('DS'), _utilEnGarde.eg.literal('HTTPS'), _utilEnGarde.eg.literal('LOC'), _utilEnGarde.eg.literal('MX'), _utilEnGarde.eg.literal('NAPTR'), _utilEnGarde.eg.literal('NS'), _utilEnGarde.eg.literal('PTR'), _utilEnGarde.eg.literal('SRV'), _utilEnGarde.eg.literal('SPF'), _utilEnGarde.eg.literal('TXT'), _utilEnGarde.eg.literal('SMIMEA'), _utilEnGarde.eg.literal('SSHFP'), _utilEnGarde.eg.literal('SVCB'), _utilEnGarde.eg.literal('TLSA'), _utilEnGarde.eg.literal('URI')]),
  zone_id: _zone.Zone.props.id.optional,
  zone_name: _zone.Zone.props.name.optional,
  comment: _utilEnGarde.eg.union([_utilEnGarde.eg.string.optional, _utilEnGarde.eg.null]).optional,
  tags: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional
});

exports.DNSRecord = DNSRecord;

var DNSFirewallCluster = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  maximum_cache_ttl: _utilEnGarde.eg.number,
  minimum_cache_ttl: _utilEnGarde.eg.number,
  deprecate_any_requests: _utilEnGarde.eg.boolean,
  origin_ips: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  dns_firewall_ips: _utilEnGarde.eg.array(_utilEnGarde.eg.string)
});

exports.DNSFirewallCluster = DNSFirewallCluster;

var DNSAcl = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  ip_range: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string
});

exports.DNSAcl = DNSAcl;

var DNSTsig = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  algo: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  secret: _utilEnGarde.eg.string
});

exports.DNSTsig = DNSTsig;

var DNSPeer = _utilEnGarde.eg.object({
  name: _utilEnGarde.eg.string,
  id: _utilEnGarde.eg.string,
  ip: _utilEnGarde.eg.string,
  port: _utilEnGarde.eg.number,
  ixfr_enable: _utilEnGarde.eg.boolean,
  tsig_id: _utilEnGarde.eg.string.optional
});

exports.DNSPeer = DNSPeer;

var ZonePeerConfig = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  auto_refresh_seconds: _utilEnGarde.eg.number.optional,
  peers: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  checked_time: _utilEnGarde.eg.string,
  modified_time: _utilEnGarde.eg.string.optional,
  last_transferred_time: _utilEnGarde.eg.string.optional
});

exports.ZonePeerConfig = ZonePeerConfig;

var DNSOutgoingZoneTransfers = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('Enabled'), _utilEnGarde.eg.literal('Disabled')]);

exports.DNSOutgoingZoneTransfers = DNSOutgoingZoneTransfers;

var HostnameRegions = _utilEnGarde.eg.array(_utilEnGarde.eg.object({
  key: _utilEnGarde.eg.string,
  label: _utilEnGarde.eg.string
}));

exports.HostnameRegions = HostnameRegions;

var RegionalHostname = _utilEnGarde.eg.object({
  hostname: _utilEnGarde.eg.string,
  region_key: _utilEnGarde.eg.string
});

exports.RegionalHostname = RegionalHostname;

var RegionalHostnames = _utilEnGarde.eg.array(RegionalHostname);

exports.RegionalHostnames = RegionalHostnames;