"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HealthGroup = exports.HealthData = exports.OriginGroup = exports.OriginData = exports.LoadBalancerUsage = exports.LoadBalancer = exports.LoadBalancerRule = exports.LoadBalancerRuleOverrides = exports.LoadBalancerPool = exports.LoadBalancerMonitor = exports.Origin = void 0;

var _utilEnGarde = require("@cloudflare/util-en-garde");

//
var Origin = _utilEnGarde.eg.object({
  address: _utilEnGarde.eg.any.optional,
  name: _utilEnGarde.eg.string.optional,
  disabled_at: _utilEnGarde.eg.string.optional,
  enabled: _utilEnGarde.eg.boolean.optional,
  weight: _utilEnGarde.eg.number.optional,
  header: _utilEnGarde.eg.object({
    Host: _utilEnGarde.eg.array(_utilEnGarde.eg.string)
  }).optional
});

exports.Origin = Origin;

var LoadBalancerMonitor = _utilEnGarde.eg.object({
  description: _utilEnGarde.eg.string,
  created_on: _utilEnGarde.eg.string.optional,
  modified_on: _utilEnGarde.eg.string.optional,
  id: _utilEnGarde.eg.string,
  type: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('http'), _utilEnGarde.eg.literal('https'), _utilEnGarde.eg.literal('tcp'), _utilEnGarde.eg.literal('smtp'), _utilEnGarde.eg.literal('udp_icmp'), _utilEnGarde.eg.literal('udp_icmp'), _utilEnGarde.eg.literal('icmp_ping')]),
  interval: _utilEnGarde.eg.number,
  retries: _utilEnGarde.eg.number,
  timeout: _utilEnGarde.eg.number,
  expected_body: _utilEnGarde.eg.string,
  expected_codes: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.array(_utilEnGarde.eg.string)]),
  follow_redirects: _utilEnGarde.eg.boolean,
  allow_insecure: _utilEnGarde.eg.boolean,
  probe_zone: _utilEnGarde.eg.string,
  path: _utilEnGarde.eg.string,
  port: _utilEnGarde.eg.number.optional,
  header: _utilEnGarde.eg.any,
  method: _utilEnGarde.eg.string
});

exports.LoadBalancerMonitor = LoadBalancerMonitor;

var LoadBalancerPool = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  healthy: _utilEnGarde.eg.boolean,
  monitor: _utilEnGarde.eg.union([LoadBalancerMonitor, _utilEnGarde.eg.null]).optional,
  origins: _utilEnGarde.eg.array(Origin).optional,
  weight: _utilEnGarde.eg.number.optional,
  disabled_at: _utilEnGarde.eg.string.optional,
  enabled: _utilEnGarde.eg.boolean,
  check_regions: _utilEnGarde.eg.union([_utilEnGarde.eg.array(_utilEnGarde.eg.string), _utilEnGarde.eg.null]),
  minimum_origins: _utilEnGarde.eg.number,
  latitude: _utilEnGarde.eg.number.optional,
  longitude: _utilEnGarde.eg.number.optional,
  load_shedding: _utilEnGarde.eg.object({
    default_percent: _utilEnGarde.eg.number.optional,
    default_policy: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('hash'), _utilEnGarde.eg.literal('random')]).optional,
    session_percent: _utilEnGarde.eg.number.optional,
    session_policy: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('hash'), _utilEnGarde.eg.literal('random')]).optional
  }).optional,
  origin_steering: _utilEnGarde.eg.object({
    policy: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('random'), _utilEnGarde.eg.literal('hash')])
  }).optional,
  notification_email: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.array(_utilEnGarde.eg.string)]).optional,
  notification_filter: _utilEnGarde.eg.object({
    pool: _utilEnGarde.eg.object({
      disable: _utilEnGarde.eg.boolean.optional,
      healthy: _utilEnGarde.eg.union([_utilEnGarde.eg.boolean, _utilEnGarde.eg.null]).optional
    }).optional,
    origin: _utilEnGarde.eg.object({
      disable: _utilEnGarde.eg.boolean.optional,
      healthy: _utilEnGarde.eg.union([_utilEnGarde.eg.boolean, _utilEnGarde.eg.null]).optional
    }).optional
  }).optional
});

exports.LoadBalancerPool = LoadBalancerPool;

var SteeringPolicy = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('off'), _utilEnGarde.eg.literal('dynamic_latency'), _utilEnGarde.eg.literal('geo'), _utilEnGarde.eg.literal('random'), _utilEnGarde.eg.literal('gps'), _utilEnGarde.eg.literal('proximity')]).optional;

var LoadBalancerRuleOverrides = _utilEnGarde.eg.object({
  session_affinity: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('none'), _utilEnGarde.eg.literal('cookie'), _utilEnGarde.eg.literal('ip_cookie')]).optional,
  session_affinity_ttl: _utilEnGarde.eg.number.optional,
  ttl: _utilEnGarde.eg.number.optional,
  steering_policy: SteeringPolicy,
  fallback_pool: _utilEnGarde.eg.string.optional,
  default_pools: _utilEnGarde.eg.union([_utilEnGarde.eg.null, _utilEnGarde.eg.array(_utilEnGarde.eg.string)]).optional,
  country_pools: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.array(_utilEnGarde.eg.string)).optional,
  region_pools: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.array(_utilEnGarde.eg.string)).optional
});

exports.LoadBalancerRuleOverrides = LoadBalancerRuleOverrides;

var LoadBalancerRule = _utilEnGarde.eg.object({
  actions: _utilEnGarde.eg.unknown.optional,
  condition: _utilEnGarde.eg.string,
  disabled: _utilEnGarde.eg.boolean,
  name: _utilEnGarde.eg.string,
  priority: _utilEnGarde.eg.number.optional,
  terminates: _utilEnGarde.eg.boolean.optional,
  overrides: LoadBalancerRuleOverrides,
  fixed_response: _utilEnGarde.eg.object({
    status_code: _utilEnGarde.eg.number.optional,
    content_type: _utilEnGarde.eg.string.optional,
    message_body: _utilEnGarde.eg.string.optional,
    location: _utilEnGarde.eg.string.optional
  }).optional
});

exports.LoadBalancerRule = LoadBalancerRule;

var LoadBalancer = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  description: _utilEnGarde.eg.string.optional,
  created_on: _utilEnGarde.eg.string.optional,
  default_pools: _utilEnGarde.eg.union([_utilEnGarde.eg.array(_utilEnGarde.eg.string), _utilEnGarde.eg.array(LoadBalancerPool)]),
  enabled: _utilEnGarde.eg.boolean,
  fallback_pool: _utilEnGarde.eg.union([_utilEnGarde.eg.string, LoadBalancerPool]).optional,
  name: _utilEnGarde.eg.string,
  modified_on: _utilEnGarde.eg.string.optional,
  pop_pools: _utilEnGarde.eg.any.optional,
  region_pools: _utilEnGarde.eg.object({
    EEU: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    ENAM: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    ME: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    NAF: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    NEAS: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    NSAM: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    OC: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    SAF: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    SAS: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    SEAS: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    SSAM: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    WEU: _utilEnGarde.eg.array(LoadBalancerPool).optional,
    WNAM: _utilEnGarde.eg.array(LoadBalancerPool).optional
  }),
  country_pools: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.array(LoadBalancerPool)).optional,
  rules: _utilEnGarde.eg.array(LoadBalancerRule).optional,
  proxied: _utilEnGarde.eg.boolean,
  session_affinity: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('none'), _utilEnGarde.eg.literal('cookie'), _utilEnGarde.eg.literal('ip_cookie')]).optional,
  session_affinity_attributes: _utilEnGarde.eg.object({
    samesite: _utilEnGarde.eg.string,
    secure: _utilEnGarde.eg.string,
    drain_duration: _utilEnGarde.eg.number.optional,
    zero_downtime_failover: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('none'), _utilEnGarde.eg.literal('temporary'), _utilEnGarde.eg.literal('sticky')]).optional
  }),
  session_affinity_ttl: _utilEnGarde.eg.number.optional,
  steering_policy: SteeringPolicy,
  location_strategy: _utilEnGarde.eg.object({
    prefer_ecs: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('always'), _utilEnGarde.eg.literal('never'), _utilEnGarde.eg.literal('geo'), _utilEnGarde.eg.literal('proximity')]),
    mode: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('pop'), _utilEnGarde.eg.literal('resolver_ip')])
  }),
  random_steering: _utilEnGarde.eg.object({
    default_weight: _utilEnGarde.eg.number,
    pool_weights: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.number).optional
  }).optional,
  ttl: _utilEnGarde.eg.number.optional,
  check_regions: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional,
  adaptive_routing: _utilEnGarde.eg.object({
    failover_across_pools: _utilEnGarde.eg.boolean
  })
});

exports.LoadBalancer = LoadBalancer;

var LoadBalancerUsage = _utilEnGarde.eg.object({
  load_balancers: _utilEnGarde.eg.number,
  monitors: _utilEnGarde.eg.number,
  origins: _utilEnGarde.eg.number,
  pools: _utilEnGarde.eg.number,
  max_origins_per_pool: _utilEnGarde.eg.number,
  minimum_monitor_interval: _utilEnGarde.eg.number
});

exports.LoadBalancerUsage = LoadBalancerUsage;

var OriginData = _utilEnGarde.eg.object({
  healthy: _utilEnGarde.eg.boolean,
  rtt: _utilEnGarde.eg.string,
  failure_reason: _utilEnGarde.eg.string
});

exports.OriginData = OriginData;

var OriginGroup = _utilEnGarde.eg.record(_utilEnGarde.eg.string, OriginData);

exports.OriginGroup = OriginGroup;

var HealthData = _utilEnGarde.eg.object({
  colo_id: _utilEnGarde.eg.string,
  healthy: _utilEnGarde.eg.boolean,
  origins: _utilEnGarde.eg.array(OriginGroup)
});

exports.HealthData = HealthData;

var HealthGroup = _utilEnGarde.eg.object({
  pool_id: _utilEnGarde.eg.string,
  pop_health: _utilEnGarde.eg.record(_utilEnGarde.eg.string, HealthData)
});

exports.HealthGroup = HealthGroup;