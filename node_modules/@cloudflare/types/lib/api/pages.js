"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PagesTail = exports.AccountSettingsResult = exports.FunctionsUsageModel = exports.UploadFileGroupPayload = exports.DirectUploadsJWT = exports.DeploymentExistingLiveLogs = exports.DeploymentLiveLogsJWTPayload = exports.DeploymentLiveLogsJWT = exports.UnifiedDeploymentLogMessages = exports.LogMessage = exports.Project = exports.DeploymentConfigs = exports.DeploymentConfigEnv = exports.ServiceBindingMap = exports.ServiceBindingValue = exports.BucketBindingValue = exports.DatabaseBindingValue = exports.NamespaceBindingValue = exports.EnvironmentVariableBindingMap = exports.EnvironmentVariableBindingValue = exports.SecretText = exports.PlainText = exports.Deployment = exports.ProjectSource = exports.ProjectSourceConfig = exports.BuildConfig = exports.DeploymentStage = exports.Environment = exports.PagesUploadFileResult = void 0;

var _utilEnGarde = require("@cloudflare/util-en-garde");

var _enumerable = require("../utils/enumerable");

var PagesUploadFileResult = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string
});

exports.PagesUploadFileResult = PagesUploadFileResult;

var Environment = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('preview'), _utilEnGarde.eg.literal('production')]);

exports.Environment = Environment;

var DeploymentStage = _utilEnGarde.eg.object({
  name: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('queued'), _utilEnGarde.eg.literal('initialize'), _utilEnGarde.eg.literal('clone_repo'), _utilEnGarde.eg.literal('build'), _utilEnGarde.eg.literal('deploy')]),
  status: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('idle'), _utilEnGarde.eg.literal('active'), _utilEnGarde.eg.literal('canceled'), _utilEnGarde.eg.literal('success'), _utilEnGarde.eg.literal('failure'), _utilEnGarde.eg.literal('skipped')]),
  started_on: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]),
  ended_on: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null])
});

exports.DeploymentStage = DeploymentStage;

var BuildConfig = _utilEnGarde.eg.object({
  build_command: _utilEnGarde.eg.string,
  destination_dir: _utilEnGarde.eg.string,
  root_dir: _utilEnGarde.eg.string,
  web_analytics_tag: _utilEnGarde.eg.string.optional,
  web_analytics_token: _utilEnGarde.eg.string.optional,
  fast_builds: _utilEnGarde.eg.boolean.optional
});

exports.BuildConfig = BuildConfig;

var ProjectSourceConfig = _utilEnGarde.eg.object({
  owner: _utilEnGarde.eg.string,
  repo_name: _utilEnGarde.eg.string,
  production_branch: _utilEnGarde.eg.string.optional,
  pr_comments_enabled: _utilEnGarde.eg.boolean.optional,
  deployments_enabled: _utilEnGarde.eg.boolean.optional,
  production_deployments_enabled: _utilEnGarde.eg.boolean.optional,
  preview_deployment_setting: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('all'), _utilEnGarde.eg.literal('none'), _utilEnGarde.eg.literal('custom')]).optional,
  preview_branch_includes: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional,
  preview_branch_excludes: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional
});

exports.ProjectSourceConfig = ProjectSourceConfig;

var ProjectSource = _utilEnGarde.eg.object({
  type: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('github'), _utilEnGarde.eg.literal('gitlab')]),
  config: ProjectSourceConfig
});

exports.ProjectSource = ProjectSource;

var Deployment = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  project_id: _utilEnGarde.eg.string,
  project_name: _utilEnGarde.eg.string,
  url: _utilEnGarde.eg.string,
  environment: Environment,
  deployment_trigger: _utilEnGarde.eg.object({
    type: _utilEnGarde.eg.string,
    metadata: _utilEnGarde.eg.object({
      branch: _utilEnGarde.eg.string,
      commit_hash: _utilEnGarde.eg.string,
      commit_message: _utilEnGarde.eg.string
    })
  }),
  latest_stage: DeploymentStage,
  stages: _utilEnGarde.eg.array(DeploymentStage),
  aliases: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  created_on: _utilEnGarde.eg.string,
  modified_on: _utilEnGarde.eg.string,
  build_config: BuildConfig,
  env_vars: _utilEnGarde.eg.any,
  kv_namespaces: _utilEnGarde.eg.any.optional,
  durable_object_namespaces: _utilEnGarde.eg.any.optional,
  short_id: _utilEnGarde.eg.string,
  production_branch: _utilEnGarde.eg.string,
  build_image_major_version: _utilEnGarde.eg.number,
  source: ProjectSource.optional,
  is_skipped: _utilEnGarde.eg.boolean.optional,
  files: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.string.optional).optional
});

exports.Deployment = Deployment;

var PlainText = _utilEnGarde.eg.literal('plain_text');

exports.PlainText = PlainText;

var SecretText = _utilEnGarde.eg.literal('secret_text');

exports.SecretText = SecretText;

var EnvironmentVariableBindingValue = _utilEnGarde.eg.object({
  value: _utilEnGarde.eg.string,
  type: _utilEnGarde.eg.union([PlainText, SecretText]).optional
});

exports.EnvironmentVariableBindingValue = EnvironmentVariableBindingValue;

var EnvironmentVariableBindingMap = _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.union([EnvironmentVariableBindingValue, _utilEnGarde.eg.null]));

exports.EnvironmentVariableBindingMap = EnvironmentVariableBindingMap;

var NamespaceBindingValue = _utilEnGarde.eg.object({
  namespace_id: _utilEnGarde.eg.string
});

exports.NamespaceBindingValue = NamespaceBindingValue;

var DatabaseBindingValue = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string
});

exports.DatabaseBindingValue = DatabaseBindingValue;

var BucketBindingValue = _utilEnGarde.eg.object({
  name: _utilEnGarde.eg.string
});

exports.BucketBindingValue = BucketBindingValue;

var ServiceBindingValue = _utilEnGarde.eg.object({
  service: _utilEnGarde.eg.string,
  environment: _utilEnGarde.eg.string
});

exports.ServiceBindingValue = ServiceBindingValue;

var ServiceBindingMap = _utilEnGarde.eg.record(_utilEnGarde.eg.string, ServiceBindingValue);

exports.ServiceBindingMap = ServiceBindingMap;

var DeploymentConfigEnv = _utilEnGarde.eg.object({
  env_vars: EnvironmentVariableBindingMap.optional,
  kv_namespaces: _utilEnGarde.eg.record(_utilEnGarde.eg.string, NamespaceBindingValue).optional,
  durable_object_namespaces: _utilEnGarde.eg.record(_utilEnGarde.eg.string, NamespaceBindingValue).optional,
  d1_databases: _utilEnGarde.eg.record(_utilEnGarde.eg.string, DatabaseBindingValue).optional,
  r2_buckets: _utilEnGarde.eg.record(_utilEnGarde.eg.string, BucketBindingValue).optional,
  services: ServiceBindingMap.optional,
  compatibility_date: _utilEnGarde.eg.string.optional,
  compatibility_flags: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional,
  always_use_latest_compatibility_date: _utilEnGarde.eg.boolean.optional,
  build_image_major_version: _utilEnGarde.eg.number.optional,
  usage_model: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('bundled'), _utilEnGarde.eg.literal('unbound')]).optional
});

exports.DeploymentConfigEnv = DeploymentConfigEnv;

var DeploymentConfigs = _utilEnGarde.eg.record(_utilEnGarde.eg.union([_utilEnGarde.eg.literal('production'), _utilEnGarde.eg.literal('preview')]), DeploymentConfigEnv);

exports.DeploymentConfigs = DeploymentConfigs;

var Project = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  subdomain: _utilEnGarde.eg.string,
  domains: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  source: ProjectSource.optional,
  build_config: BuildConfig,
  deployment_configs: DeploymentConfigs,
  latest_deployment: Deployment,
  canonical_deployment: Deployment,
  created_on: _utilEnGarde.eg.string,
  production_branch: _utilEnGarde.eg.string,
  production_script_name: _utilEnGarde.eg.string,
  preview_script_name: _utilEnGarde.eg.string
});

exports.Project = Project;

/** Log message for Pages logs */
var LogMessage = _utilEnGarde.eg.object({
  ts: _utilEnGarde.eg.string,
  line: _utilEnGarde.eg.string
});
/** Log message for Pages logs */


exports.LogMessage = LogMessage;

/** Persistent logs from funfetti */
var UnifiedDeploymentLogMessages = _utilEnGarde.eg.object({
  data: _utilEnGarde.eg.array(LogMessage),
  total: _utilEnGarde.eg.number,
  includes_container_logs: _utilEnGarde.eg.boolean
});
/** Persistent logs from funfetti */


exports.UnifiedDeploymentLogMessages = UnifiedDeploymentLogMessages;

/** Live Logs jwt response from funfetti */
var DeploymentLiveLogsJWT = _utilEnGarde.eg.object({
  jwt: _utilEnGarde.eg.string
});
/** Live Logs jwt response from funfetti */


exports.DeploymentLiveLogsJWT = DeploymentLiveLogsJWT;

/** Live logs jwt payload for connecting to the live logs durable object */
var DeploymentLiveLogsJWTPayload = _utilEnGarde.eg.object({
  aud: _utilEnGarde.eg.string,
  exp: _utilEnGarde.eg.number,
  iat: _utilEnGarde.eg.number,
  iss: _utilEnGarde.eg.string,
  features: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  externalDeploymentId: _utilEnGarde.eg.string
});
/** Live logs jwt payload for connecting to the live logs durable object */


exports.DeploymentLiveLogsJWTPayload = DeploymentLiveLogsJWTPayload;

/** Response from Live Logs (api.pages.cloudflare.com/logs endpoint) to get existing logs over http */
var DeploymentExistingLiveLogs = _utilEnGarde.eg.object({
  nextIndex: _utilEnGarde.eg.number,
  logs: _utilEnGarde.eg.array(LogMessage)
});
/** Response from Live Logs (api.pages.cloudflare.com/logs endpoint) to get existing logs over http */


exports.DeploymentExistingLiveLogs = DeploymentExistingLiveLogs;

var DirectUploadsJWT = _utilEnGarde.eg.object({
  jwt: _utilEnGarde.eg.string
});

exports.DirectUploadsJWT = DirectUploadsJWT;

var UploadFileGroupPayload = _utilEnGarde.eg.object({
  key: _utilEnGarde.eg.string,
  value: _utilEnGarde.eg.string,
  metadata: _utilEnGarde.eg.object({
    contentType: _utilEnGarde.eg.string
  }),
  base64: _utilEnGarde.eg.boolean
});

exports.UploadFileGroupPayload = UploadFileGroupPayload;
var FunctionsUsageModel = (0, _enumerable.enumerable)(['bundled', 'unbound']);
exports.FunctionsUsageModel = FunctionsUsageModel;

var AccountSettingsResult = _utilEnGarde.eg.object({
  default_usage_model: _utilEnGarde.eg.string
});

exports.AccountSettingsResult = AccountSettingsResult;

var PagesTail = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  url: _utilEnGarde.eg.string,
  expires_at: _utilEnGarde.eg.string.optional
});

exports.PagesTail = PagesTail;