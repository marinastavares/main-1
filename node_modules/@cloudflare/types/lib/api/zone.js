"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZoneHold = exports.ZoneBlock = exports.Zone = exports.Unreachability = exports.AbuseUrl = exports.ZoneUIConfig = exports.SelectedZonePlan = exports.ZonePlan = exports.ZoneType = exports.ZoneAccount = exports.ZoneOwner = exports.ZoneMeta = void 0;

var _utilEnGarde = require("@cloudflare/util-en-garde");

var _subscription = require("./subscription");

var _ratePlan = require("./ratePlan");

var ZoneMeta = _utilEnGarde.eg.object({
  step: _utilEnGarde.eg.number,
  wildcard_proxiable: _utilEnGarde.eg.boolean,
  custom_certificate_quota: _utilEnGarde.eg.number,
  page_rule_quota: _utilEnGarde.eg.number,
  phishing_detected: _utilEnGarde.eg.boolean,
  multiple_railguns_allowed: _utilEnGarde.eg.boolean,
  secondary_overrides: _utilEnGarde.eg.boolean,
  cdn_only: _utilEnGarde.eg.boolean.optional,
  dns_only: _utilEnGarde.eg.boolean.optional
});

exports.ZoneMeta = ZoneMeta;

var ZoneOwner = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  type: _utilEnGarde.eg.string,
  email: _utilEnGarde.eg.string
});

exports.ZoneOwner = ZoneOwner;

var ZoneAccount = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string
});

exports.ZoneAccount = ZoneAccount;

var ZoneType = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('full'), _utilEnGarde.eg.literal('partial'), _utilEnGarde.eg.literal('secondary')]);

exports.ZoneType = ZoneType;

var ZonePlan = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  price: _utilEnGarde.eg.number,
  currency: _utilEnGarde.eg.string,
  frequency: _utilEnGarde.eg.union([_subscription.Frequency, _utilEnGarde.eg.literal('')]),
  is_subscribed: _utilEnGarde.eg.boolean,
  can_subscribe: _utilEnGarde.eg.boolean,
  legacy_id: _ratePlan.PlanId,
  legacy_discount: _utilEnGarde.eg.boolean,
  externally_managed: _utilEnGarde.eg.boolean,
  annual: _utilEnGarde.eg.object({
    price: _utilEnGarde.eg.number,
    frequency: _utilEnGarde.eg.union([_subscription.Frequency, _utilEnGarde.eg.literal('')])
  }).optional
});

exports.ZonePlan = ZonePlan;

var SelectedZonePlan = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  price: _utilEnGarde.eg.number,
  currency: _utilEnGarde.eg.string,
  frequency: _utilEnGarde.eg.union([_subscription.Frequency, _utilEnGarde.eg.literal('')]),
  is_subscribed: _utilEnGarde.eg.boolean,
  can_subscribe: _utilEnGarde.eg.boolean,
  legacy_id: _ratePlan.PlanId,
  legacy_discount: _utilEnGarde.eg.boolean,
  externally_managed: _utilEnGarde.eg.boolean,
  annual: _utilEnGarde.eg.object({
    price: _utilEnGarde.eg.number,
    frequency: _utilEnGarde.eg.union([_subscription.Frequency, _utilEnGarde.eg.literal('')])
  }).optional,
  isAnnualPlanSelected: _utilEnGarde.eg.boolean.optional
});

exports.SelectedZonePlan = SelectedZonePlan;

var ZoneUIConfig = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  value: _utilEnGarde.eg.any
});

exports.ZoneUIConfig = ZoneUIConfig;

var AbuseUrl = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  created_on: _utilEnGarde.eg.string,
  type: _utilEnGarde.eg.string,
  url: _utilEnGarde.eg.string,
  status: _utilEnGarde.eg.string
});

exports.AbuseUrl = AbuseUrl;

var Unreachability = _utilEnGarde.eg.object({
  timestamp: _utilEnGarde.eg.string,
  origins: _utilEnGarde.eg.array(_utilEnGarde.eg.string)
});

exports.Unreachability = Unreachability;

var Zone = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  name: _utilEnGarde.eg.string,
  status: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('active'), _utilEnGarde.eg.literal('pending'), _utilEnGarde.eg.literal('moved'), _utilEnGarde.eg.literal('deactivated'), _utilEnGarde.eg.literal('paused'), _utilEnGarde.eg.literal('initializing')]),
  paused: _utilEnGarde.eg.boolean,
  type: ZoneType,
  development_mode: _utilEnGarde.eg.number,
  name_servers: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  original_name_servers: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  original_registrar: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]),
  original_dnshost: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]),
  modified_on: _utilEnGarde.eg.string,
  created_on: _utilEnGarde.eg.string,
  activated_on: _utilEnGarde.eg.union([_utilEnGarde.eg.string, _utilEnGarde.eg.null]),
  meta: ZoneMeta,
  owner: ZoneOwner,
  account: ZoneAccount,
  permissions: _utilEnGarde.eg.array(_utilEnGarde.eg.string),
  plan: ZonePlan,
  plan_pending: ZonePlan.optional,
  vanity_name_servers: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional,
  vanity_name_servers_ips: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.object({
    ipv4: _utilEnGarde.eg.string,
    ipv6: _utilEnGarde.eg.string
  })).optional,
  verification_key: _utilEnGarde.eg.string.optional,
  host: _utilEnGarde.eg.object({
    name: _utilEnGarde.eg.string,
    website: _utilEnGarde.eg.string
  }).optional,
  betas: _utilEnGarde.eg.array(_utilEnGarde.eg.string).optional,
  deactivation_reason: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('abuse_violation'), _utilEnGarde.eg.literal('plan_limits_exceeded')]).optional,
  // Only appears when "status" is "deactivated"
  jump_start: _utilEnGarde.eg.boolean.optional,
  // This is only for PATCH request. When jump_start is true, this means that scanning is initiated as soon as the zone is created and the records will be auto-committed to prod_cf
  cname_suffix: _utilEnGarde.eg.string.optional
});

exports.Zone = Zone;

var ZoneBlock = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  account_id: _utilEnGarde.eg.number,
  brand_id: _utilEnGarde.eg.number,
  cadence_workflow_id: _utilEnGarde.eg.string,
  created: _utilEnGarde.eg.string,
  delete_reason: _utilEnGarde.eg.string,
  hostname: _utilEnGarde.eg.string,
  list_item_id: _utilEnGarde.eg.string,
  lumen_database_url: _utilEnGarde.eg.string,
  match_subdomain: _utilEnGarde.eg.boolean,
  match_subpath: _utilEnGarde.eg.boolean,
  path: _utilEnGarde.eg.string,
  protocol: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('http'), _utilEnGarde.eg.literal('https')]),
  reference: _utilEnGarde.eg.string,
  review_status: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('no_review'), _utilEnGarde.eg.literal('requested')]),
  review_date: _utilEnGarde.eg.string,
  ruleset_id: _utilEnGarde.eg.string,
  status: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('block_active'), _utilEnGarde.eg.literal('block_failed'), _utilEnGarde.eg.literal('block_pending'), _utilEnGarde.eg.literal('block_in_progress'), _utilEnGarde.eg.literal('delete_pending'), _utilEnGarde.eg.literal('delete_in_progress'), _utilEnGarde.eg.literal('delete_failed'), _utilEnGarde.eg.literal('deleted')]),
  type: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('geo_block'), _utilEnGarde.eg.literal('legal_block'), _utilEnGarde.eg.literal('phishing_interstitial'), _utilEnGarde.eg.literal('malware_interstitial')]),
  updated: _utilEnGarde.eg.string,
  zone_id: _utilEnGarde.eg.number,
  zone_plan: _utilEnGarde.eg.string
});

exports.ZoneBlock = ZoneBlock;

var ZoneHold = _utilEnGarde.eg.object({
  hold: _utilEnGarde.eg.boolean,
  hold_after: _utilEnGarde.eg.string,
  include_subdomains: _utilEnGarde.eg.boolean
});

exports.ZoneHold = ZoneHold;