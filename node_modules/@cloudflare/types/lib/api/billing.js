"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BillingPlan = exports.AddressValidation = exports.BillingAddress = exports.PlanName = exports.BillingAccountCredits = exports.BillableUsage = exports.BillableUsageTimeDelta = exports.BillableUsageMetric = exports.BillingQuote = exports.BillingPayment = exports.BillingTransaction = exports.BillingAccount = exports.BillingAccountType = exports.BillingProfile = exports.PaymentMethodList = exports.PaymentMethod = exports.PaymentMethodType = exports.BFResponse = exports.DeviceDetails = exports.PaymentGateway = void 0;

var _utilEnGarde = require("@cloudflare/util-en-garde");

var _subscription = require("./subscription");

var _ratePlan = require("./ratePlan");

var PaymentGateway = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('paypal'), _utilEnGarde.eg.literal('stripe'), _utilEnGarde.eg.literal('')]);

exports.PaymentGateway = PaymentGateway;

var DeviceDetails = _utilEnGarde.eg.object({
  device_session_id: _utilEnGarde.eg.string,
  fraud_merchant_id: _utilEnGarde.eg.string,
  correlation_id: _utilEnGarde.eg.string
});

exports.DeviceDetails = DeviceDetails;

var BFResponse = _utilEnGarde.eg.object({
  nonce: _utilEnGarde.eg.string,
  deviceDetails: DeviceDetails,
  details: _utilEnGarde.eg.object({
    firstName: _utilEnGarde.eg.string,
    lastName: _utilEnGarde.eg.string,
    email: _utilEnGarde.eg.string
  })
});

exports.BFResponse = BFResponse;

var PaymentMethodType = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('PAYPAL'), _utilEnGarde.eg.literal('CREDIT_CARD')]);

exports.PaymentMethodType = PaymentMethodType;

var PaymentMethod = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  type: PaymentMethodType.optional,
  last_four: _utilEnGarde.eg.string,
  expiration_date: _utilEnGarde.eg.string,
  first_name: _utilEnGarde.eg.string.optional,
  last_name: _utilEnGarde.eg.string.optional,
  address: _utilEnGarde.eg.string.optional,
  address2: _utilEnGarde.eg.string.optional,
  country: _utilEnGarde.eg.string.optional,
  zipcode: _utilEnGarde.eg.string.optional,
  state: _utilEnGarde.eg.string.optional,
  city: _utilEnGarde.eg.string.optional,
  payment_email: _utilEnGarde.eg.string.optional,
  payment_gateway: PaymentGateway.optional,
  payment_nonce: BFResponse.props.nonce.optional,
  device_data: BFResponse.props.deviceDetails.optional,
  default: _utilEnGarde.eg.boolean.optional,
  h_captcha_response: _utilEnGarde.eg.string.optional,
  validation_code: _utilEnGarde.eg.string.optional,
  captcha_challenge_jwt: _utilEnGarde.eg.string.optional
});

exports.PaymentMethod = PaymentMethod;

var PaymentMethodList = _utilEnGarde.eg.array(PaymentMethod);

exports.PaymentMethodList = PaymentMethodList;

var BillingProfile = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  first_name: _utilEnGarde.eg.string,
  last_name: _utilEnGarde.eg.string,
  company: _utilEnGarde.eg.string.optional,
  address: _utilEnGarde.eg.string.optional,
  address2: _utilEnGarde.eg.string.optional,
  billing_email: _utilEnGarde.eg.string.optional,
  city: _utilEnGarde.eg.string.optional,
  state: _utilEnGarde.eg.string.optional,
  zipcode: _utilEnGarde.eg.string,
  country: _utilEnGarde.eg.string,
  enterprise_billing_email: _utilEnGarde.eg.string.optional,
  enterprise_primary_email: _utilEnGarde.eg.string.optional,
  card_expiry_month: _utilEnGarde.eg.number.optional,
  card_expiry_year: _utilEnGarde.eg.number.optional,
  card_number: _utilEnGarde.eg.string.optional,
  vat: _utilEnGarde.eg.string.optional,
  payment_email: _utilEnGarde.eg.string.optional,
  payment_first_name: _utilEnGarde.eg.string,
  payment_last_name: _utilEnGarde.eg.string,
  payment_address: _utilEnGarde.eg.string.optional,
  payment_address2: _utilEnGarde.eg.string.optional,
  payment_country: _utilEnGarde.eg.string,
  payment_zipcode: _utilEnGarde.eg.string,
  payment_state: _utilEnGarde.eg.string.optional,
  payment_city: _utilEnGarde.eg.string.optional,
  payment_gateway: PaymentGateway,
  next_bill_date: _utilEnGarde.eg.string.optional,
  use_legacy: _utilEnGarde.eg.boolean.optional,
  is_partner: _utilEnGarde.eg.boolean.optional,
  buying_rate_plan: _utilEnGarde.eg.string.optional,
  profile_type: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('payment_method'), _utilEnGarde.eg.literal('billing'), _utilEnGarde.eg.literal('invoice')]).optional,
  validation_code: _utilEnGarde.eg.string.optional,
  payment_nonce: BFResponse.props.nonce.optional,
  device_data: BFResponse.props.deviceDetails.optional,
  account_type: _utilEnGarde.eg.string.optional,
  balance: _utilEnGarde.eg.number.optional,
  h_captcha_response: _utilEnGarde.eg.string.optional,
  captcha_challenge_jwt: _utilEnGarde.eg.string.optional,
  default: _utilEnGarde.eg.boolean.optional,
  type: PaymentMethodType.optional
});

exports.BillingProfile = BillingProfile;

var BillingAccountType = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('partners_ent'), _utilEnGarde.eg.literal('ad_hoc_contract'), _utilEnGarde.eg.literal('employee'), _utilEnGarde.eg.literal('election'), _utilEnGarde.eg.literal('sfcc'), _utilEnGarde.eg.literal('partners_basic'), _utilEnGarde.eg.literal('startup'), _utilEnGarde.eg.literal('intern'), _utilEnGarde.eg.literal('ibm'), _utilEnGarde.eg.literal('pay_go'), _utilEnGarde.eg.literal('cloudflare_ent')]);

exports.BillingAccountType = BillingAccountType;

var BillingAccount = _utilEnGarde.eg.object({
  account_type: BillingAccountType.optional,
  status: _utilEnGarde.eg.string,
  flags: _utilEnGarde.eg.object({
    async_tract: _utilEnGarde.eg.boolean,
    banned: _utilEnGarde.eg.boolean,
    pdf_invoices: _utilEnGarde.eg.boolean,
    install_base_customer: _utilEnGarde.eg.boolean,
    bad_debt: _utilEnGarde.eg.boolean
  })
});

exports.BillingAccount = BillingAccount;

var BillingTransaction = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.string,
  type: _utilEnGarde.eg.string,
  action: _utilEnGarde.eg.string,
  description: _utilEnGarde.eg.string,
  occurred_at: _utilEnGarde.eg.string,
  invoice_id: _utilEnGarde.eg.string,
  receipt_id: _utilEnGarde.eg.string,
  currency: _utilEnGarde.eg.string,
  external_invoice_id: _utilEnGarde.eg.string,
  amount: _utilEnGarde.eg.number,
  amount_to_pay: _utilEnGarde.eg.number,
  status: _utilEnGarde.eg.union([_utilEnGarde.eg.literal('OPEN'), _utilEnGarde.eg.literal('CLOSED'), _utilEnGarde.eg.literal('DRAFT'), _utilEnGarde.eg.literal('PROCESSING'), _utilEnGarde.eg.literal('CREDIT_FULLY_APPLIED'), _utilEnGarde.eg.literal('CREDIT_OPEN')]),
  source: _utilEnGarde.eg.string
});

exports.BillingTransaction = BillingTransaction;

var BillingPayment = _utilEnGarde.eg.object({
  payment_applications: _utilEnGarde.eg.array(_utilEnGarde.eg.object({
    invoice_id: _utilEnGarde.eg.string,
    amount: _utilEnGarde.eg.number
  })).optional,
  amount: _utilEnGarde.eg.number.optional,
  payment_method_id: _utilEnGarde.eg.union([_utilEnGarde.eg.number, _utilEnGarde.eg.string]).optional
});

exports.BillingPayment = BillingPayment;

var BillingQuote = _utilEnGarde.eg.object({
  id: _utilEnGarde.eg.number,
  account_id: _utilEnGarde.eg.number,
  coupon_code: _utilEnGarde.eg.string,
  original_price: _utilEnGarde.eg.number,
  discount: _utilEnGarde.eg.number,
  price: _utilEnGarde.eg.number,
  subscriptions: _utilEnGarde.eg.array(_utilEnGarde.eg.object({
    quantity: _utilEnGarde.eg.number,
    unit_original_price: _utilEnGarde.eg.number,
    unit_discount: _utilEnGarde.eg.number,
    unit_price: _utilEnGarde.eg.number,
    rate_plan: _utilEnGarde.eg.object({
      id: _utilEnGarde.eg.string
    }),
    component_values: _utilEnGarde.eg.array(_utilEnGarde.eg.object({
      name: _utilEnGarde.eg.string,
      value: _utilEnGarde.eg.number
    }))
  })),
  created_date: _utilEnGarde.eg.string
});

exports.BillingQuote = BillingQuote;

var BillableUsageMetric = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('streamMinutesViewed'), _utilEnGarde.eg.literal('rateLimitingRequestsAllowed'), _utilEnGarde.eg.literal('loadBalancingQueries'), _utilEnGarde.eg.literal('argoAcceleratedBytes'), _utilEnGarde.eg.literal('workersRequests'), _utilEnGarde.eg.literal('workersKVReads'), _utilEnGarde.eg.literal('imageResizingRequests'), _utilEnGarde.eg.literal('spectrumBytesTransferred')]);

exports.BillableUsageMetric = BillableUsageMetric;

var BillableUsageTimeDelta = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('minute'), _utilEnGarde.eg.literal('hour'), _utilEnGarde.eg.literal('day'), _utilEnGarde.eg.literal('week'), _utilEnGarde.eg.literal('month'), _utilEnGarde.eg.literal('quarter'), _utilEnGarde.eg.literal('year')]);

exports.BillableUsageTimeDelta = BillableUsageTimeDelta;

var BillableUsage = _utilEnGarde.eg.object({
  rows: _utilEnGarde.eg.number,
  data: _utilEnGarde.eg.union([_utilEnGarde.eg.null, _utilEnGarde.eg.array(_utilEnGarde.eg.object({
    metrics: _utilEnGarde.eg.array(_utilEnGarde.eg.array(_utilEnGarde.eg.number))
  }))]).optional,
  data_lag: _utilEnGarde.eg.number,
  min: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.any),
  max: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.any),
  totals: _utilEnGarde.eg.record(_utilEnGarde.eg.string, _utilEnGarde.eg.any),
  query: _utilEnGarde.eg.object({
    dimensions: _utilEnGarde.eg.array(_utilEnGarde.eg.number),
    metrics: _utilEnGarde.eg.array(BillableUsageMetric).optional,
    since: _utilEnGarde.eg.string,
    until: _utilEnGarde.eg.string,
    time_delta: BillableUsageTimeDelta,
    limit: _utilEnGarde.eg.number
  }),
  time_intervals: _utilEnGarde.eg.array(_utilEnGarde.eg.tuple([_utilEnGarde.eg.string, _utilEnGarde.eg.string])).optional
});

exports.BillableUsage = BillableUsage;

var BillingAccountCredits = _utilEnGarde.eg.object({
  total_account_credits: _utilEnGarde.eg.number
});

exports.BillingAccountCredits = BillingAccountCredits;

var PlanName = _utilEnGarde.eg.union([_utilEnGarde.eg.literal('CF_BIZ'), _utilEnGarde.eg.literal('CF_BIZ_EMP'), _utilEnGarde.eg.literal('CF_BIZ_FREE'), _utilEnGarde.eg.literal('CF_BIZ_PLUS'), _utilEnGarde.eg.literal('CF_ENT'), _utilEnGarde.eg.literal('CF_FREE'), _utilEnGarde.eg.literal('CF_PRO_20_20'), _utilEnGarde.eg.literal('CF_PRO_20_5'), _utilEnGarde.eg.literal('CF_PRO_FREE')]);

exports.PlanName = PlanName;

var BillingAddress = _utilEnGarde.eg.object({
  address: _utilEnGarde.eg.string.optional,
  address2: _utilEnGarde.eg.string.optional,
  city: _utilEnGarde.eg.string.optional,
  state: _utilEnGarde.eg.string.optional,
  zipcode: _utilEnGarde.eg.string,
  country: _utilEnGarde.eg.string,
  validation_code: _utilEnGarde.eg.string.optional
});

exports.BillingAddress = BillingAddress;

var AddressValidation = _utilEnGarde.eg.object({
  validated_addresses: _utilEnGarde.eg.array(BillingAddress)
});

exports.AddressValidation = AddressValidation;

var BillingPlan = _utilEnGarde.eg.object({
  id: _ratePlan.PlanId,
  name: PlanName,
  currency: _utilEnGarde.eg.literal('USD'),
  frequency: _subscription.Frequency,
  components: _utilEnGarde.eg.array(_utilEnGarde.eg.object({
    name: _subscription.SubscriptionComponentName,
    default: _utilEnGarde.eg.number,
    unit_price: _utilEnGarde.eg.number
  })),
  sets: _utilEnGarde.eg.array(_subscription.SubscriptionSet),
  is_contract: _utilEnGarde.eg.boolean
});

exports.BillingPlan = BillingPlan;