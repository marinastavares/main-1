import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const PageRuleMinifyValue: import("@cloudflare/util-en-garde").ObjectCodec<{
    html: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
    css: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
    js: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
}>;
export declare type PageRuleMinifyValue = TypeFromCodec<typeof PageRuleMinifyValue>;
export declare const PageRuleForwardingUrlValue: import("@cloudflare/util-en-garde").ObjectCodec<{
    status_code: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    url: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type PageRuleForwardingUrlValue = TypeFromCodec<typeof PageRuleForwardingUrlValue>;
export declare type PageRuleTtlValue = number | 'no-cache' | 'no-store';
export declare type PageRuleCacheTtlByStatusValue = {
    [statusCode: string]: PageRuleTtlValue;
} | null;
declare const PageRuleCacheKeyFieldsValue: import("@cloudflare/util-en-garde").ObjectCodec<{
    query_string: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"*">>;
        exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").Type<[], [], unknown>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").Type<[], [], unknown>>;
        exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"*">>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>]>>;
    header: import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"origin">>>>;
        check_presence: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>;
    cookie: import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        check_presence: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>;
    host: import("@cloudflare/util-en-garde").ObjectCodec<{
        resolved: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    user: import("@cloudflare/util-en-garde").ObjectCodec<{
        device_type: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        geo: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        lang: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
}>;
export declare type PageRuleCacheKeyFieldsValue = TypeFromCodec<typeof PageRuleCacheKeyFieldsValue>;
export declare const PageRuleValue: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("@cloudflare/util-en-garde").ObjectCodec<{
    html: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
    css: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
    js: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    status_code: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    url: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    query_string: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"*">>;
        exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").Type<[], [], unknown>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").Type<[], [], unknown>>;
        exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"*">>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>]>>;
    header: import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"origin">>>>;
        check_presence: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>;
    cookie: import("@cloudflare/util-en-garde").ObjectCodec<{
        include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        check_presence: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>;
    host: import("@cloudflare/util-en-garde").ObjectCodec<{
        resolved: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    user: import("@cloudflare/util-en-garde").ObjectCodec<{
        device_type: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        geo: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        lang: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
}>]>>;
export declare type PageRuleValue = TypeFromCodec<typeof PageRuleValue> | PageRuleCacheKeyFieldsValue | PageRuleCacheTtlByStatusValue;
export declare const PageRuleAction: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("@cloudflare/util-en-garde").ObjectCodec<{
        html: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
        css: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
        js: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        status_code: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        url: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        query_string: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            include: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"*">>;
            exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").Type<[], [], unknown>>;
        }>, import("@cloudflare/util-en-garde").ObjectCodec<{
            include: import("@cloudflare/util-en-garde").Codec<import("io-ts").Type<[], [], unknown>>;
            exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"*">>;
        }>, import("@cloudflare/util-en-garde").ObjectCodec<{
            include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        }>]>>;
        header: import("@cloudflare/util-en-garde").ObjectCodec<{
            include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"origin">>>>;
            check_presence: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        }>;
        cookie: import("@cloudflare/util-en-garde").ObjectCodec<{
            include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            check_presence: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        }>;
        host: import("@cloudflare/util-en-garde").ObjectCodec<{
            resolved: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        user: import("@cloudflare/util-en-garde").ObjectCodec<{
            device_type: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            geo: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            lang: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
    }>]>>, import("io-ts").UndefinedC]>>;
}>;
export declare type PageRuleAction = TypeFromCodec<typeof PageRuleAction>;
export declare const PageRulesConstraint: import("@cloudflare/util-en-garde").ObjectCodec<{
    operator: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"matches">>;
    value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type PageRulesConstraint = TypeFromCodec<typeof PageRulesConstraint>;
export declare const PageRuleTarget: import("@cloudflare/util-en-garde").ObjectCodec<{
    target: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"url">>;
    constraint: import("@cloudflare/util-en-garde").ObjectCodec<{
        operator: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"matches">>;
        value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>;
}>;
export declare type PageRuleTarget = TypeFromCodec<typeof PageRuleTarget>;
export declare const PageRule: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    priority: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    status: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"active">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"disabled">>]>>;
    actions: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("@cloudflare/util-en-garde").ObjectCodec<{
            html: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
            css: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
            js: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"on">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"off">>]>>, import("io-ts").UndefinedC]>>;
        }>, import("@cloudflare/util-en-garde").ObjectCodec<{
            status_code: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            url: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("@cloudflare/util-en-garde").ObjectCodec<{
            query_string: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                include: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"*">>;
                exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").Type<[], [], unknown>>;
            }>, import("@cloudflare/util-en-garde").ObjectCodec<{
                include: import("@cloudflare/util-en-garde").Codec<import("io-ts").Type<[], [], unknown>>;
                exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"*">>;
            }>, import("@cloudflare/util-en-garde").ObjectCodec<{
                include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
                exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            }>]>>;
            header: import("@cloudflare/util-en-garde").ObjectCodec<{
                include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
                exclude: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"origin">>>>;
                check_presence: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            }>;
            cookie: import("@cloudflare/util-en-garde").ObjectCodec<{
                include: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
                check_presence: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            }>;
            host: import("@cloudflare/util-en-garde").ObjectCodec<{
                resolved: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            user: import("@cloudflare/util-en-garde").ObjectCodec<{
                device_type: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                geo: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                lang: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
        }>]>>, import("io-ts").UndefinedC]>>;
    }>>>;
    targets: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        target: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"url">>;
        constraint: import("@cloudflare/util-en-garde").ObjectCodec<{
            operator: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"matches">>;
            value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        }>;
    }>>>;
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    modified_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type PageRule = TypeFromCodec<typeof PageRule>;
export declare const PageRulesSettingToggle: import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"toggle">>;
}>;
export declare type PageRulesSettingToggle = TypeFromCodec<typeof PageRulesSettingToggle>;
export declare const PageRulesSettingRange: import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"range">>;
    min: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    max: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    suggested_values: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>>>;
}>;
export declare type PageRulesSettingRange = TypeFromCodec<typeof PageRulesSettingRange>;
export declare const PageRulesSettingSelect: import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select">>]>>;
    multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    allowEmpty: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
}>;
export declare type PageRulesSettingSelect = TypeFromCodec<typeof PageRulesSettingSelect>;
export declare const PageRulesSettingString: import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"string">>;
    readonly: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
export declare type PageRulesSettingString = TypeFromCodec<typeof PageRulesSettingString>;
export declare const PageRulesSettingCheckboxes: import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select">>]>>;
    multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    allowEmpty: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
}>;
export declare type PageRulesSettingCheckboxes = TypeFromCodec<typeof PageRulesSettingCheckboxes>;
export declare const PageRulesSettingStatusCode: import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"status_code">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>;
    multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>>>;
}>;
export declare type PageRulesSettingStatusCode = TypeFromCodec<typeof PageRulesSettingStatusCode>;
export declare const PageRulesSettingForwardingUrl: import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"url">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"forwardingUrl">>;
}>;
export declare type PageRulesSettingForwardingUrl = TypeFromCodec<typeof PageRulesSettingForwardingUrl>;
export declare const PageRuleProperty: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"toggle">>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"range">>;
    min: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    max: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    suggested_values: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>>>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"status_code">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>;
    multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>>>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"string">>;
    readonly: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"url">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"forwardingUrl">>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select">>]>>;
    multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    allowEmpty: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select">>]>>;
    multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    allowEmpty: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
}>]>>;
export declare type PageRuleProperty = TypeFromCodec<typeof PageRuleProperty>;
export declare const PageRulesSetting: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    properties: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"toggle">>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"range">>;
        min: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        max: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        suggested_values: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"status_code">>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>;
        multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"string">>;
        readonly: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"url">>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"forwardingUrl">>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select">>]>>;
        multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        allowEmpty: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"value">>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"choice">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select">>]>>;
        multiple: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        allowEmpty: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        choices: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>]>>>>;
    readonly: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
}>;
export declare type PageRulesSetting = TypeFromCodec<typeof PageRulesSetting>;
export declare const PageRulesQuota: import("@cloudflare/util-en-garde").ObjectCodec<{
    quota: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare type PageRulesQuota = TypeFromCodec<typeof PageRulesQuota>;
export {};
