import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const AlertIntegration: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    createdAt: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
/**
 * A connection request to Pager Duty that is created before we attempt to link
 * PagerDuty to this account
 */
export declare type PagerDutyIntegrationRequest = TypeFromCodec<typeof PagerDutyIntegrationRequest>;
declare const PagerDutyIntegrationRequest: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type AlertIntegration = TypeFromCodec<typeof AlertIntegration>;
declare const AlertWebhookType: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"slack">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"gchat">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"discord">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"generic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"splunk">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"datadog">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"opsgenie">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"feishu">>]>>;
export declare type AlertWebhookType = TypeFromCodec<typeof AlertWebhookType>;
declare const AlertWebhookIntegration: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    url: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    createdAt: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    secret: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    last_success: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    last_failure: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AlertWebhookIntegration = TypeFromCodec<typeof AlertWebhookIntegration>;
export declare type AlertUpsertWebhook = Omit<AlertWebhookIntegration, 'createdAt' | 'last_success' | 'last_failure'>;
export declare const AlertEligibleIntegrations: import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").ObjectCodec<{
    eligible: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    ready: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>>>;
export declare type AlertEligibleIntegrations = TypeFromCodec<typeof AlertEligibleIntegrations>;
export declare const EmailParameters: import("@cloudflare/util-en-garde").ObjectCodec<{
    recipients: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
}>;
export declare type EmailParameters = TypeFromCodec<typeof EmailParameters>;
export declare const AlertPolicy: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    emails: import("@cloudflare/util-en-garde").ObjectCodec<{
        recipients: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>;
    pager_duty: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    webhooks: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    alert_type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    conditions: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        '>=': import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>>>;
    }>, import("io-ts").UndefinedC]>>;
    filters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>>>, import("io-ts").UndefinedC]>>;
}>;
export declare type AlertPolicy = TypeFromCodec<typeof AlertPolicy>;
export declare const AlertDeliveryMechanism: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AlertDeliveryMechanism = TypeFromCodec<typeof AlertDeliveryMechanism>;
export declare const AlertPolicyAPIV2: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    conditions: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        '>=': import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>>>;
    }>, import("io-ts").UndefinedC]>>;
    mechanisms: import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>>>>>;
    filters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>>>, import("io-ts").UndefinedC]>>;
    alert_type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type AlertPolicyAPIV2 = TypeFromCodec<typeof AlertPolicyAPIV2>;
export declare const AvailableAlert: import("@cloudflare/util-en-garde").ObjectCodec<{
    display_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AvailableAlert = TypeFromCodec<typeof AvailableAlert>;
export {};
