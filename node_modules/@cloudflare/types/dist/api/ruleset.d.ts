import { TypeFromCodec } from '@cloudflare/util-en-garde';
declare const ZoneRulesetRewriteRuleValue: import("@cloudflare/util-en-garde").ObjectCodec<{
    uri: import("@cloudflare/util-en-garde").ObjectCodec<{
        path: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
            expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        }>, import("io-ts").UndefinedC]>>;
        query: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
            expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        }>, import("io-ts").UndefinedC]>>;
    }>;
}>;
declare const ZoneRulesetHeaderModificationRuleValue: import("@cloudflare/util-en-garde").ObjectCodec<{
    headers: import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").ObjectCodec<{
        operation: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"add">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"set">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"remove">>]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>>>;
}>;
declare const ZoneRulesetSanitizeRuleValue: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    overrides: import("@cloudflare/util-en-garde").ObjectCodec<{
        rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>>>;
    }>;
}>;
declare const ZoneRulesetRewriteRule: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"rewrite">>;
    expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        uri: import("@cloudflare/util-en-garde").ObjectCodec<{
            path: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
                expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
            }>, import("io-ts").UndefinedC]>>;
            query: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
                expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
            }>, import("io-ts").UndefinedC]>>;
        }>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        headers: import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").ObjectCodec<{
            operation: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"add">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"set">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"remove">>]>>;
            expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
            value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        }>>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        overrides: import("@cloudflare/util-en-garde").ObjectCodec<{
            rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>>>;
        }>;
    }>]>>;
    ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
declare const Ruleset: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"zone">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed">>]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_transform">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_late_transform">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_sanitize">>]>>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"rewrite">>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            uri: import("@cloudflare/util-en-garde").ObjectCodec<{
                path: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                    value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
                    expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
                }>, import("io-ts").UndefinedC]>>;
                query: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                    value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
                    expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
                }>, import("io-ts").UndefinedC]>>;
            }>;
        }>, import("@cloudflare/util-en-garde").ObjectCodec<{
            headers: import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").ObjectCodec<{
                operation: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"add">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"set">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"remove">>]>>;
                expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
                value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
            }>>>;
        }>, import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            overrides: import("@cloudflare/util-en-garde").ObjectCodec<{
                rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                }>>>;
            }>;
        }>]>>;
        ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>>>, import("io-ts").UndefinedC]>>;
}>;
export declare type Ruleset = TypeFromCodec<typeof Ruleset>;
export declare type ZoneRulesetRewriteRule = TypeFromCodec<typeof ZoneRulesetRewriteRule>;
export declare type ZoneRulesetRewriteRuleValue = TypeFromCodec<typeof ZoneRulesetRewriteRuleValue>;
export declare type ZoneRulesetHeaderModificationRuleValue = TypeFromCodec<typeof ZoneRulesetHeaderModificationRuleValue>;
export declare type ZoneRulesetSanitizeRuleValue = TypeFromCodec<typeof ZoneRulesetSanitizeRuleValue>;
declare const RulesMigration: import("@cloudflare/util-en-garde").ObjectCodec<{
    firewall_rules_ui_enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    custom_rules_ui_enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
export declare type RulesMigration = TypeFromCodec<typeof RulesMigration>;
export {};
