import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const AccountSettings: import("@cloudflare/util-en-garde").ObjectCodec<{
    access_approval_expiry: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    enforce_twofactor: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    api_access_enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
export declare type AccountSettings = TypeFromCodec<typeof AccountSettings>;
export declare const AccountMeta: import("@cloudflare/util-en-garde").ObjectCodec<{
    has_pro_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    has_business_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    has_enterprise_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
export declare type AccountMeta = TypeFromCodec<typeof AccountMeta>;
export declare const AccountLegacyFlagStatus: import("@cloudflare/util-en-garde").ObjectCodec<{
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
export declare type AccountLegacyFlagStatus = TypeFromCodec<typeof AccountLegacyFlagStatus>;
export declare const AccountLegacyFlagEnterpriseZoneQuota: import("@cloudflare/util-en-garde").ObjectCodec<{
    maximum: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    current: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    available: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare type AccountLegacyFlagEnterpriseZoneQuota = TypeFromCodec<typeof AccountLegacyFlagEnterpriseZoneQuota>;
export declare const AccountLegacyFlags: import("@cloudflare/util-en-garde").ObjectCodec<{
    railgun: import("@cloudflare/util-en-garde").ObjectCodec<{
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    dns_firewall: import("@cloudflare/util-en-garde").ObjectCodec<{
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    china_network_visible: import("@cloudflare/util-en-garde").ObjectCodec<{
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    china_private_key_network_deployment: import("@cloudflare/util-en-garde").ObjectCodec<{
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    cname_signup: import("@cloudflare/util-en-garde").ObjectCodec<{
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    custom_pages: import("@cloudflare/util-en-garde").ObjectCodec<{
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    enterprise_zone_quota: import("@cloudflare/util-en-garde").ObjectCodec<{
        maximum: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        current: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        available: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>;
}>;
export declare type AccountLegacyFlags = TypeFromCodec<typeof AccountLegacyFlags>;
export declare const AccountQuotaValues: import("@cloudflare/util-en-garde").ObjectCodec<{
    remaining: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    used: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare type AccountQuotaValues = TypeFromCodec<typeof AccountQuotaValues>;
export declare const AccountQuota: import("@cloudflare/util-en-garde").ObjectCodec<{
    bulk_pro: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        remaining: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        used: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>, import("io-ts").UndefinedC]>>;
    bulk_biz: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        remaining: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        used: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>, import("io-ts").UndefinedC]>>;
    bulk_ent: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        remaining: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        used: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountQuota = TypeFromCodec<typeof AccountQuota>;
export declare const AccountRole: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    permissions: import("@cloudflare/util-en-garde").ObjectCodec<{
        access: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        analytics: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        app: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        auditlogs: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        billing: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        blocks: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        cache_purge: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        dns_records: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        lb: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        legal: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        logs: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        member: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        organization: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        ssl: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        stream: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        subscription: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        waf: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        waitingroom: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        webhooks: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        worker: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        zaraz: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        zone: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        zone_settings: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        http_applications: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        zone_versioning: import("@cloudflare/util-en-garde").ObjectCodec<{
            read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
    }>;
}>;
export declare type AccountRole = TypeFromCodec<typeof AccountRole>;
export declare const AccountMemberResourceGroup: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    metadata: import("@cloudflare/util-en-garde").ObjectCodec<{
        editable: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
}>;
export declare type AccountMemberResourceGroup = TypeFromCodec<typeof AccountMemberResourceGroup>;
export declare const AccountMemberPermissionGroup: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountMemberPermissionGroup = TypeFromCodec<typeof AccountMemberPermissionGroup>;
export declare const AccountMemberPolicy: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    access: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    permission_groups: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>>>;
    resource_groups: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        metadata: import("@cloudflare/util-en-garde").ObjectCodec<{
            editable: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
    }>>>;
}>>>;
export declare type AccountMemberPolicy = TypeFromCodec<typeof AccountMemberPolicy>;
export declare const AccountMember: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    user: import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        email: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        first_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
        last_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
        two_factor_authentication_enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    status: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"accepted">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pending">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"rejected">>]>>;
    api_access_enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>, import("io-ts").UndefinedC]>>;
    roles: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        permissions: import("@cloudflare/util-en-garde").ObjectCodec<{
            access: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            analytics: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            app: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            auditlogs: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            billing: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            blocks: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            cache_purge: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            dns_records: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            lb: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            legal: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            logs: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            member: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            organization: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            ssl: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            stream: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            subscription: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            waf: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            waitingroom: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            webhooks: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            worker: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            zaraz: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            zone: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            zone_settings: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            http_applications: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
            zone_versioning: import("@cloudflare/util-en-garde").ObjectCodec<{
                read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            }>;
        }>;
    }>>>;
    policies: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        access: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        permission_groups: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            meta: import("@cloudflare/util-en-garde").ObjectCodec<{
                description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                editable: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
                label: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                scopes: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            }>;
            permissions: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                implies: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                    key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                }>>>, import("io-ts").UndefinedC]>>;
            }>>>, import("io-ts").UndefinedC]>>;
        }>>>;
        resource_groups: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            meta: import("@cloudflare/util-en-garde").ObjectCodec<{
                editable: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            }>;
            name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            scope: import("@cloudflare/util-en-garde").ObjectCodec<{
                key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                objects: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                    key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                }>>>;
                subset_of: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                    key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                    objects: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                        key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                    }>>>, import("io-ts").UndefinedC]>>;
                }>>>, import("io-ts").UndefinedC]>>;
            }>;
        }>>>;
    }>>>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountMember = TypeFromCodec<typeof AccountMember>;
export declare const WebhookEvent: import("@cloudflare/util-en-garde").ObjectCodec<{
    'ssl.certificate.deletion.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.certificate.deletion.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.certificate.deployment.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.certificate.deployment.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.certificate.renewal.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.certificate.renewal.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.certificate.renewal.upcoming_certificate_expiration_notification': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.certificate.validation.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.certificate.validation.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.custom_hostname_certificate.validation.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.custom_hostname_certificate.validation.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.dedicated_certificate.issuance.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    'ssl.dedicated_certificate.issuance.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
export declare type WebhookEvent = TypeFromCodec<typeof WebhookEvent>;
export declare const AccountWebhook: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    category: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    triggers: import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>;
    url: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    secret: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    events: import("@cloudflare/util-en-garde").ObjectCodec<{
        'ssl.certificate.deletion.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.certificate.deletion.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.certificate.deployment.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.certificate.deployment.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.certificate.renewal.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.certificate.renewal.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.certificate.renewal.upcoming_certificate_expiration_notification': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.certificate.validation.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.certificate.validation.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.custom_hostname_certificate.validation.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.custom_hostname_certificate.validation.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.dedicated_certificate.issuance.failed': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        'ssl.dedicated_certificate.issuance.succeeded': import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
}>;
export declare type AccountWebhook = TypeFromCodec<typeof AccountWebhook>;
export declare const AccountInvite: import("@cloudflare/util-en-garde").ObjectCodec<{
    account_pubname: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    user_email: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type AccountInvite = TypeFromCodec<typeof AccountInvite>;
export declare const Account: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    settings: import("@cloudflare/util-en-garde").ObjectCodec<{
        access_approval_expiry: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
        enforce_twofactor: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        api_access_enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    meta: import("@cloudflare/util-en-garde").ObjectCodec<{
        has_pro_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        has_business_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        has_enterprise_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    legacy_flags: import("@cloudflare/util-en-garde").ObjectCodec<{
        railgun: import("@cloudflare/util-en-garde").ObjectCodec<{
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        dns_firewall: import("@cloudflare/util-en-garde").ObjectCodec<{
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        china_network_visible: import("@cloudflare/util-en-garde").ObjectCodec<{
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        china_private_key_network_deployment: import("@cloudflare/util-en-garde").ObjectCodec<{
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        cname_signup: import("@cloudflare/util-en-garde").ObjectCodec<{
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        custom_pages: import("@cloudflare/util-en-garde").ObjectCodec<{
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        enterprise_zone_quota: import("@cloudflare/util-en-garde").ObjectCodec<{
            maximum: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            current: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            available: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        }>;
    }>;
}>;
export declare type Account = TypeFromCodec<typeof Account>;
export declare const AccountLegoState: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pending">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"completed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"signed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
export declare type AccountLegoState = TypeFromCodec<typeof AccountLegoState>;
export declare const AccountSubscriptionType: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"paygo">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"contract">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
export declare type AccountSubscriptionType = TypeFromCodec<typeof AccountSubscriptionType>;
export declare const AccountLegoProduct: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"access">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"rate_limiting">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"load_balancing">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"stream">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"workers">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"r2">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"argo">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"bot_management">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
export declare type AccountLegoProduct = TypeFromCodec<typeof AccountLegoProduct>;
export declare const AccountLegoContact: import("@cloudflare/util-en-garde").ObjectCodec<{
    first_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    email: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    organization: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountLegoContact = TypeFromCodec<typeof AccountLegoContact>;
export declare const AccountLegoContactAPI: import("@cloudflare/util-en-garde").ObjectCodec<{
    contact: import("@cloudflare/util-en-garde").ObjectCodec<{
        first_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        last_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        email: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        organization: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>;
}>;
export declare type AccountLegoContactAPI = TypeFromCodec<typeof AccountLegoContactAPI>;
export declare const AccountLegoContract: import("@cloudflare/util-en-garde").ObjectCodec<{
    lego_state: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pending">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"completed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"signed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("io-ts").UndefinedC]>>;
    subscription_type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"paygo">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"contract">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountLegoContract = TypeFromCodec<typeof AccountLegoContract>;
export declare const AccountFirewallRuleAction: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>;
export declare const AccountFirewallSensitivityLevels: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>;
export declare type AccountFirewallRuleAction = TypeFromCodec<typeof AccountFirewallRuleAction>;
export declare const AccountFirewallRule: import("@cloudflare/util-en-garde").ObjectCodec<{
    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>;
    categories: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        ruleset: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>, import("io-ts").UndefinedC]>>;
    score_threshold: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("io-ts").UndefinedC]>>;
    created: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    allowed_override_actions: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountFirewallRule = TypeFromCodec<typeof AccountFirewallRule>;
declare const CategoryOverride: import("@cloudflare/util-en-garde").ObjectCodec<{
    category: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    sensitivity_level: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>, import("io-ts").UndefinedC]>>;
}>;
export declare type CategoryOverride = TypeFromCodec<typeof CategoryOverride>;
declare const RuleOverride: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    sensitivity_level: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>, import("io-ts").UndefinedC]>>;
}>;
export declare type RuleOverride = TypeFromCodec<typeof RuleOverride>;
export declare const AccountFirewallRuleOverride: import("@cloudflare/util-en-garde").ObjectCodec<{
    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
    action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        matched_data: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            public_key: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
        }>, import("io-ts").UndefinedC]>>;
        overrides: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>, import("io-ts").UndefinedC]>>;
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
            categories: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                category: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>, import("io-ts").UndefinedC]>>;
                enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
                sensitivity_level: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>, import("io-ts").UndefinedC]>>;
            }>>>, import("io-ts").UndefinedC]>>;
            rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>, import("io-ts").UndefinedC]>>;
                enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
                sensitivity_level: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>, import("io-ts").UndefinedC]>>;
            }>>>, import("io-ts").UndefinedC]>>;
            sensitivity_level: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>, import("io-ts").UndefinedC]>>;
        }>, import("io-ts").UndefinedC]>>;
        increment: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("io-ts").UndefinedC]>>;
    }>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountFirewallRuleOverride = TypeFromCodec<typeof AccountFirewallRuleOverride>;
declare const AccountFirewallRuleSkipOverride: import("@cloudflare/util-en-garde").ObjectCodec<{
    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>;
    action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
        rulesets: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
        ruleset: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"current">>, import("io-ts").UndefinedC]>>;
        rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>>>, import("io-ts").UndefinedC]>>;
    }>;
    logging: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>, import("io-ts").UndefinedC]>>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare const AccountFirewallRuleHTTPApplication: import("@cloudflare/util-en-garde").ObjectCodec<{
    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>;
    position: import("@cloudflare/util-en-garde").ObjectCodec<{
        index: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        after: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        before: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>;
    action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
        http_application: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        lock_by_default: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountFirewallRuleHTTPApplication = TypeFromCodec<typeof AccountFirewallRuleHTTPApplication>;
export declare type AccountFirewallRuleSkipOverride = TypeFromCodec<typeof AccountFirewallRuleSkipOverride>;
export declare const AccountFirewallRulesetKind: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"custom">>]>>;
export declare const AccountFirewallRuleset: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"custom">>]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>;
        categories: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            ruleset: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        }>, import("io-ts").UndefinedC]>>;
        score_threshold: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("io-ts").UndefinedC]>>;
        created: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        allowed_override_actions: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>>>, import("io-ts").UndefinedC]>>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountFirewallRuleset = TypeFromCodec<typeof AccountFirewallRuleset>;
export declare const AccountFirewallRulesetOverride: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"custom">>]>>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
            matched_data: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                public_key: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
            }>, import("io-ts").UndefinedC]>>;
            overrides: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>, import("io-ts").UndefinedC]>>;
                enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
                categories: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                    category: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>, import("io-ts").UndefinedC]>>;
                    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
                    sensitivity_level: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>, import("io-ts").UndefinedC]>>;
                }>>>, import("io-ts").UndefinedC]>>;
                rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
                    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
                    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"allow">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"ddos_dynamic">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>]>>, import("io-ts").UndefinedC]>>;
                    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
                    sensitivity_level: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>, import("io-ts").UndefinedC]>>;
                }>>>, import("io-ts").UndefinedC]>>;
                sensitivity_level: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"default">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"medium">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"low">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"eoff">>]>>, import("io-ts").UndefinedC]>>;
            }>, import("io-ts").UndefinedC]>>;
            increment: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("io-ts").UndefinedC]>>;
        }>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            rulesets: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
            ruleset: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"current">>, import("io-ts").UndefinedC]>>;
            rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>>>, import("io-ts").UndefinedC]>>;
        }>;
        logging: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>, import("io-ts").UndefinedC]>>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>]>>>>, import("io-ts").UndefinedC]>>;
}>;
export declare type AccountFirewallRulesetOverride = TypeFromCodec<typeof AccountFirewallRulesetOverride>;
export declare const AccountFirewallRulesetHTTPApplication: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"custom">>]>>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"select_config">>;
        position: import("@cloudflare/util-en-garde").ObjectCodec<{
            index: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            after: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            before: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            http_application: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            lock_by_default: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        }>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ref: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>>>;
}>;
export declare type AccountFirewallRulesetHTTPApplication = TypeFromCodec<typeof AccountFirewallRulesetHTTPApplication>;
declare const BaseRule: import("@cloudflare/util-en-garde").ObjectCodec<{
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>, import("io-ts").UndefinedC]>>;
    action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>, import("io-ts").UndefinedC]>>;
}>;
declare const AccountCustomRulesetEntrypoint: import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_firewall_custom">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            override: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>, import("io-ts").UndefinedC]>>;
            matched_data: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                public_key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            }>, import("io-ts").UndefinedC]>>;
        }>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>]>>>>, import("io-ts").UndefinedC]>>;
}>]>>;
export declare type AccountCustomRulesetEntrypoint = TypeFromCodec<typeof AccountCustomRulesetEntrypoint>;
declare const AccountManagedEntrypoint: import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_firewall_managed">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>]>>>>, import("io-ts").UndefinedC]>>;
}>]>>;
export declare type AccountManagedEntrypoint = TypeFromCodec<typeof AccountManagedEntrypoint>;
declare const AccountCustomRuleset: import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"custom">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_firewall_custom">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>]>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>]>>>>;
}>]>>;
export declare type AccountCustomRuleset = TypeFromCodec<typeof AccountCustomRuleset>;
declare const AccountRateLimitingRuleset: import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"custom">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_ratelimit">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>]>>;
        ratelimit: import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>]>>>>;
}>]>>;
export declare type AccountRateLimitingRuleset = TypeFromCodec<typeof AccountRateLimitingRuleset>;
declare const AccountIDSRuleset: import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"magic_transit_ids_managed">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>]>>>>;
}>]>>;
declare const AccountIDSEntrypoint: import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"magic_transit_ids_managed">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>]>>>>;
}>]>>;
export declare type AccountIDSRuleset = TypeFromCodec<typeof AccountIDSRuleset>;
export declare type AccountIDSEntrypoint = TypeFromCodec<typeof AccountIDSEntrypoint>;
declare const GenericRuleset: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"custom">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_ratelimit">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>]>>;
        ratelimit: import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>]>>>>;
}>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_firewall_custom">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            override: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>, import("io-ts").UndefinedC]>>;
            matched_data: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
                public_key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            }>, import("io-ts").UndefinedC]>>;
        }>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>]>>>>, import("io-ts").UndefinedC]>>;
}>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"custom">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_firewall_custom">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"log">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"js_challenge">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"skip">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"challenge">>]>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>]>>>>;
}>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"managed">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"magic_transit_ids_managed">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>]>>>>;
}>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http_request_firewall_managed">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>]>>>>, import("io-ts").UndefinedC]>>;
}>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>, import("@cloudflare/util-en-garde").ObjectCodec<{
    kind: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"root">>;
    phase: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"magic_transit_ids_managed">>;
    rules: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").IntersectionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"execute">>;
        action_parameters: import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
    }>, import("@cloudflare/util-en-garde").ObjectCodec<{
        description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        last_updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        version: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        ratelimit: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            characteristics: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
            period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_per_period: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            mitigation_timeout: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            requests_to_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            counting_expression: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
        action: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        action_parameters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            version: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>, import("io-ts").UndefinedC]>>;
    }>]>>>>;
}>]>>]>>;
declare type ElementType<T> = T extends (infer U)[] ? U : never;
export declare type GenericRulesetType = TypeFromCodec<typeof GenericRuleset>;
export declare type BaseRule = ElementType<GenericRulesetType['rules'] & TypeFromCodec<typeof BaseRule>>;
export declare type GenericRuleset = Omit<GenericRulesetType, 'rules'> & {
    rules: Array<BaseRule>;
};
export {};
