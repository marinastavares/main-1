import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const Interval: import("@cloudflare/util-en-garde").ObjectCodec<{
    min: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    max: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare type Interval = TypeFromCodec<typeof Interval>;
export declare const Allocation: import("@cloudflare/util-en-garde").ObjectCodec<{
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"bool">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"range">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"max_count">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enum_number">>]>>;
    value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("@cloudflare/util-en-garde").ObjectCodec<{
        min: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        max: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>, import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>>>]>>;
}>;
export declare type Allocation = TypeFromCodec<typeof Allocation>;
export declare const Feature: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    feature_set: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type Feature = TypeFromCodec<typeof Feature>;
export declare const Entitlement: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    created_date: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    deleted_date: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    edited_date: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    feature: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        feature_set: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>, import("io-ts").UndefinedC]>>;
    allocation: import("@cloudflare/util-en-garde").ObjectCodec<{
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"bool">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"range">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"max_count">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enum_number">>]>>;
        value: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("@cloudflare/util-en-garde").ObjectCodec<{
            min: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            max: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        }>, import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>>>]>>;
    }>;
}>;
export declare type Entitlement = TypeFromCodec<typeof Entitlement>;
