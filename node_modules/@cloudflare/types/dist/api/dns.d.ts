import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const DNSRecordMeta: import("@cloudflare/util-en-garde").ObjectCodec<{
    auto_added: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    custom_nameserver: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    email_routing: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    fallback_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    managed_by_apps: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    managed_by_argo_tunnel: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    managed_by_registrar: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    managed_by_web3: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    managed_cname: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    read_only: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    shopify: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    source: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    origin_worker_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    r2_bucket: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type DNSRecordMeta = TypeFromCodec<typeof DNSRecordMeta>;
export declare const DNSRecord: import("@cloudflare/util-en-garde").ObjectCodec<{
    content: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    data: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>, import("io-ts").UndefinedC]>>;
    locked: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    meta: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        auto_added: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        custom_nameserver: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        email_routing: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        fallback_origin: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        managed_by_apps: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        managed_by_argo_tunnel: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        managed_by_registrar: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        managed_by_web3: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        managed_cname: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        read_only: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        shopify: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        source: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        origin_worker_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        r2_bucket: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    }>, import("io-ts").UndefinedC]>>;
    modified_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    priority: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("io-ts").UndefinedC]>>;
    proxiable: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    proxied: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    ttl: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"A">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"AAAA">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"CNAME">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"CAA">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"CERT">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"DNSKEY">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"DS">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"HTTPS">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"LOC">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"MX">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"NAPTR">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"NS">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"PTR">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"SRV">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"SPF">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"TXT">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"SMIMEA">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"SSHFP">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"SVCB">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"TLSA">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"URI">>]>>;
    zone_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    zone_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    comment: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>, import("io-ts").UndefinedC]>>;
    tags: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
}>;
export declare type DNSRecord = TypeFromCodec<typeof DNSRecord>;
export declare const DNSFirewallCluster: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    maximum_cache_ttl: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    minimum_cache_ttl: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    deprecate_any_requests: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    origin_ips: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    dns_firewall_ips: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
}>;
export declare type DNSFirewallCluster = TypeFromCodec<typeof DNSFirewallCluster>;
export declare const DNSAcl: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    ip_range: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type DNSAcl = TypeFromCodec<typeof DNSAcl>;
export declare const DNSTsig: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    algo: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    secret: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type DNSTsig = TypeFromCodec<typeof DNSTsig>;
export declare const DNSPeer: import("@cloudflare/util-en-garde").ObjectCodec<{
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    ip: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    port: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    ixfr_enable: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    tsig_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type DNSPeer = TypeFromCodec<typeof DNSPeer>;
export declare const ZonePeerConfig: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    auto_refresh_seconds: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("io-ts").UndefinedC]>>;
    peers: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    checked_time: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    modified_time: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    last_transferred_time: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type ZonePeerConfig = TypeFromCodec<typeof ZonePeerConfig>;
export declare const DNSOutgoingZoneTransfers: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"Enabled">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"Disabled">>]>>;
export declare type DNSOutgoingZoneTransfers = TypeFromCodec<typeof DNSOutgoingZoneTransfers>;
export declare const HostnameRegions: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
    key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    label: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>>>;
export declare type HostnameRegions = TypeFromCodec<typeof HostnameRegions>;
export declare const RegionalHostname: import("@cloudflare/util-en-garde").ObjectCodec<{
    hostname: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    region_key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type RegionalHostname = TypeFromCodec<typeof RegionalHostname>;
export declare const RegionalHostnames: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
    hostname: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    region_key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>>>;
export declare type RegionalHostnames = TypeFromCodec<typeof RegionalHostnames>;
