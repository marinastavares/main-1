import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const PermValue: import("@cloudflare/util-en-garde").ObjectCodec<{
    read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
export declare type PermValue = TypeFromCodec<typeof PermValue>;
export declare const Permissions: import("@cloudflare/util-en-garde").ObjectCodec<{
    access: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    analytics: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    app: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    auditlogs: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    billing: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    blocks: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    cache_purge: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    dns_records: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    lb: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    legal: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    logs: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    member: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    organization: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    ssl: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    stream: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    subscription: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    waf: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    waitingroom: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    webhooks: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    worker: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    zaraz: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    zone: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    zone_settings: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    http_applications: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    zone_versioning: import("@cloudflare/util-en-garde").ObjectCodec<{
        read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        edit: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
}>;
export declare type Permissions = TypeFromCodec<typeof Permissions>;
export declare const PermKey: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralType<"analytics" | "access" | "app" | "auditlogs" | "billing" | "blocks" | "cache_purge" | "dns_records" | "lb" | "legal" | "logs" | "member" | "organization" | "ssl" | "stream" | "subscription" | "waf" | "waitingroom" | "webhooks" | "worker" | "zaraz" | "zone" | "zone_settings" | "http_applications" | "zone_versioning">>;
export declare type PermKey = TypeFromCodec<typeof PermKey>;
export declare const Can: import("@cloudflare/util-en-garde").ObjectCodec<{
    read: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    update: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    create: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    delete: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    list: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    sign: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    refresh: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
}>;
export declare type Can = TypeFromCodec<typeof Can>;
