import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const AccountResource: import("@cloudflare/util-en-garde").ObjectCodec<{
    accountId: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    effect: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare const UserResource: import("@cloudflare/util-en-garde").ObjectCodec<{
    effect: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    mode: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare const ZoneResource: import("@cloudflare/util-en-garde").ObjectCodec<{
    accountId: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    effect: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    mode: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    zoneId: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare const ipAddressFilter: import("@cloudflare/util-en-garde").ObjectCodec<{
    ipAddresses: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    operator: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare const ApiToken: import("@cloudflare/util-en-garde").ObjectCodec<{
    expires_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    not_before: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    status: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    ipAddressFilters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        ipAddresses: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        operator: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>>>, import("io-ts").UndefinedC]>>;
    issued_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    modified_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_used_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    creation_type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    scopes: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    accountResources: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        accountId: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        effect: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>>>, import("io-ts").UndefinedC]>>;
    userResources: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        effect: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        mode: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>>>, import("io-ts").UndefinedC]>>;
    zoneResources: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        accountId: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        effect: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        mode: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        zoneId: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>>>, import("io-ts").UndefinedC]>>;
    permissionGroups: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    cf_challenge_response: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare const ApiTokenFormValue: import("@cloudflare/util-en-garde").ObjectCodec<{
    expires_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    not_before: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    status: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    ipAddressFilters: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        ipAddresses: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        operator: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>>>, import("io-ts").UndefinedC]>>;
    issued_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    modified_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    last_used_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    scopes: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    permissionGroupKeys: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    accountResources: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        accountId: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        effect: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    }>>>, import("io-ts").UndefinedC]>>;
    zoneResources: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        accountId: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
        effect: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        mode: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        zoneId: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>>>, import("io-ts").UndefinedC]>>;
    permissionGroups: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare const ApiTokensTemplate: import("@cloudflare/util-en-garde").ObjectCodec<{
    expires_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    not_before: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    permissionGroupKeys: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>>>;
    accountId: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    mode: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    zoneId: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare const ApiTokensAdhocTemplate: import("@cloudflare/util-en-garde").ObjectCodec<{
    permissionGroupKeys: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        key: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>>>;
    accountId: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    mode: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    zoneId: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare const PermissionGroup: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    scopes: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    label: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>;
export declare const PermissionGroupReq: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare const CreateToken: import("@cloudflare/util-en-garde").ObjectCodec<{
    value: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare const PermissionGroups: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    description: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    scopes: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    label: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    rowId: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
}>>>;
export declare type AccountResource = TypeFromCodec<typeof AccountResource>;
export declare type ApiToken = TypeFromCodec<typeof ApiToken>;
export declare type CreateToken = TypeFromCodec<typeof CreateToken>;
export declare type ApiTokenFormValue = TypeFromCodec<typeof ApiTokenFormValue>;
export declare type ApiTokensTemplate = TypeFromCodec<typeof ApiTokensTemplate>;
export declare type ApiTokensAdhocTemplate = TypeFromCodec<typeof ApiTokensAdhocTemplate>;
export declare type PermissionGroup = TypeFromCodec<typeof PermissionGroup>;
export declare type PermissionGroupReq = TypeFromCodec<typeof PermissionGroupReq>;
export declare type PermissionGroups = TypeFromCodec<typeof PermissionGroups>;
export declare type UserResource = TypeFromCodec<typeof UserResource>;
export declare type ZoneResource = TypeFromCodec<typeof ZoneResource>;
