export * from './account';
export * from './alert';
export * from './apiKey';
export * from './apiToken';
export * from './billing';
export * from './dns';
export * from './domain';
export * from './domainResourceGroup';
export * from './zoneVersioning';
export * from './captcha';
export * from './entitlement';
export * from './flags';
export * from './graphQLSettings';
export * from './lb';
export * from './marketing';
export * from './membership';
export * from './permissions';
export * from './organization';
export * from './pageRule';
export * from './pages';
export * from './policy';
export * from './profile';
export * from './ruleset';
export * from './subscription';
export * from './two-factor';
export * from './user';
export * from './zone';
export * from './ratePlan';
export * from './settings';
export * from './spectrum';
export * from './zendesk';
export * from './railgun';
export * from './oAuthConsentApp';
export declare type APIResponse<ExpectedData = {}, ExpectedResultInfo = PaginationInfo> = {
    headers: Headers;
    status: number;
    body: APIResponseBody<ExpectedData, ExpectedResultInfo>;
    text: string;
};
export declare const ApiResponseBody: import("@cloudflare/util-en-garde").ObjectCodec<{
    result: import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>;
    success: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    errors: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        code: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>, import("io-ts").UndefinedC]>>;
        message: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>>>;
    messages: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>>>, import("io-ts").UndefinedC]>>;
    result_info: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>, import("io-ts").UndefinedC]>>;
}>;
export declare type APIResponseBody<ExpectedData = {}, ExpectedResultInfo = PaginationInfo> = {
    result: ExpectedData;
    success: boolean;
    errors: APIResponseBodyError[];
    messages: any[];
    result_info?: ExpectedResultInfo;
};
export declare type APIResponseBodyError = {
    code?: number;
    message: string;
};
export declare type APIResponseBodyResult = {
    id: string;
    script: string;
    etag: string;
    size: number;
    modified_on: string;
};
export declare type PaginationInfo = {
    next_page?: boolean;
    page: number;
    per_page: number;
    count: number;
    total_count: number;
    total_pages: number;
    cursors?: {
        before?: string;
        after?: string;
    };
};
export declare type PaginationData = {
    info: PaginationInfo;
    actionParameters: Array<string | number>;
    options: any;
    insertionOffset: number;
};
export declare type Without<T, U> = {
    [P in Exclude<keyof T, keyof U>]?: never;
};
export declare type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
