import { SupportedLocales } from '@cloudflare/intl-types';
import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const User: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    betas: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    email: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    username: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    first_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    last_name: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    telephone: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    country: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    zipcode: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    has_completed_2fa_recovery_setup: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    two_factor_authentication_enabled: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    two_factor_authentication_locked: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    two_factor_recovery_codes: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    modified_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    organizations: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        status: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        permissions: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
        roles: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    }>>>;
    has_pro_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    has_business_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    has_enterprise_zones: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    email_verified: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    suspended: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    twofactor: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"email">>;
    }>, import("io-ts").UndefinedC]>>;
    totp_configured: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    webauthn_configured: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    redirect_sso: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    redirect_oauth: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    primary_account_tag: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type User = TypeFromCodec<typeof User>;
export declare const UserDetails: import("@cloudflare/util-en-garde").ObjectCodec<{
    '2FA-RECOVERY': import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type UserDetails = TypeFromCodec<typeof UserDetails>;
export declare const Dpa: import("@cloudflare/util-en-garde").ObjectCodec<{
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    modified_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    signed_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"standard">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"standard_v2">>]>>;
    user: import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>;
}>;
export declare type Dpa = TypeFromCodec<typeof Dpa>;
export declare const Preference: import("@cloudflare/util-en-garde").ObjectCodec<{
    subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type Preference = TypeFromCodec<typeof Preference>;
export declare const UserCommunicationPreferences: import("@cloudflare/util-en-garde").ObjectCodec<{
    email: import("@cloudflare/util-en-garde").ObjectCodec<{
        verified: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        hard_bounce: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    }>;
    preferences: import("@cloudflare/util-en-garde").ObjectCodec<{
        analytics: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        apps: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        apps_communication: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        blog: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        cf_status: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        comm_ea: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        comm_news: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        comm_ssu: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        coms_optout_ssl_cert_expired_fallbacks_deployed: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        coms_optout_ssl_cert_expired_no_fallbacks: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        coms_optout_ssl_customcert_expiring_notification: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        coms_optout_ssl_dedicated_cert_expiring_cname_notification: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        coms_optout_ssl_dedicated_cert_expiring_dns_notification: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        education: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        events: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        feedback: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        marketing_communication: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        origin_status: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        product_news: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
        zone_versioning_warning: import("@cloudflare/util-en-garde").ObjectCodec<{
            subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
            created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
            updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        }>;
    }>;
    'language-locale': import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralType<import("@cloudflare/util-en-garde/dist/type-helpers").ValueOf<typeof SupportedLocales>>>;
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    updated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type UserCommunicationPreferences = TypeFromCodec<typeof UserCommunicationPreferences>;
