import { TypeFromCodec } from '@cloudflare/util-en-garde';
export declare const ZoneMeta: import("@cloudflare/util-en-garde").ObjectCodec<{
    step: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    wildcard_proxiable: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    custom_certificate_quota: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    page_rule_quota: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    phishing_detected: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    multiple_railguns_allowed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    secondary_overrides: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    cdn_only: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    dns_only: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
}>;
export declare type ZoneMeta = TypeFromCodec<typeof ZoneMeta>;
export declare const ZoneOwner: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    email: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type ZoneOwner = TypeFromCodec<typeof ZoneOwner>;
export declare const ZoneAccount: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type ZoneAccount = TypeFromCodec<typeof ZoneAccount>;
export declare const ZoneType: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"full">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partial">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"secondary">>]>>;
export declare type ZoneType = TypeFromCodec<typeof ZoneType>;
export declare const ZonePlan: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    price: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    currency: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    frequency: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"monthly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"yearly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"one-time">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
    is_subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    can_subscribe: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    legacy_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"free">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pro">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"business">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enterprise">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enterprise_trial">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"lite">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pro_plus">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_free">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_pro">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_biz">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_ent">>]>>;
    legacy_discount: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    externally_managed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    annual: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        price: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        frequency: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"monthly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"yearly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"one-time">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
    }>, import("io-ts").UndefinedC]>>;
}>;
export declare type ZonePlan = TypeFromCodec<typeof ZonePlan>;
export declare const SelectedZonePlan: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    price: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    currency: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    frequency: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"monthly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"yearly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"one-time">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
    is_subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    can_subscribe: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    legacy_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"free">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pro">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"business">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enterprise">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enterprise_trial">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"lite">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pro_plus">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_free">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_pro">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_biz">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_ent">>]>>;
    legacy_discount: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    externally_managed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    annual: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        price: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        frequency: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"monthly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"yearly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"one-time">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
    }>, import("io-ts").UndefinedC]>>;
    isAnnualPlanSelected: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
}>;
export declare type SelectedZonePlan = TypeFromCodec<typeof SelectedZonePlan>;
export declare const ZoneUIConfig: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    value: import("@cloudflare/util-en-garde").Codec<import("io-ts").AnyC>;
}>;
export declare type ZoneUIConfig = TypeFromCodec<typeof ZoneUIConfig>;
export declare const AbuseUrl: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    url: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    status: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type AbuseUrl = TypeFromCodec<typeof AbuseUrl>;
export declare const Unreachability: import("@cloudflare/util-en-garde").ObjectCodec<{
    timestamp: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    origins: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
}>;
export declare type Unreachability = TypeFromCodec<typeof Unreachability>;
export declare const Zone: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    status: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"active">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pending">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"moved">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"deactivated">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"paused">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"initializing">>]>>;
    paused: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"full">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partial">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"secondary">>]>>;
    development_mode: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    name_servers: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    original_name_servers: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    original_registrar: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    original_dnshost: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    modified_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    created_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    activated_on: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").Codec<import("io-ts").NullC>]>>;
    meta: import("@cloudflare/util-en-garde").ObjectCodec<{
        step: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        wildcard_proxiable: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        custom_certificate_quota: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        page_rule_quota: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        phishing_detected: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        multiple_railguns_allowed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        secondary_overrides: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        cdn_only: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
        dns_only: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    }>;
    owner: import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        type: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        email: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>;
    account: import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>;
    permissions: import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>;
    plan: import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        price: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        currency: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        frequency: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"monthly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"yearly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"one-time">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
        is_subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        can_subscribe: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        legacy_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"free">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pro">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"business">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enterprise">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enterprise_trial">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"lite">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pro_plus">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_free">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_pro">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_biz">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_ent">>]>>;
        legacy_discount: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        externally_managed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        annual: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            price: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            frequency: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"monthly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"yearly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"one-time">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
        }>, import("io-ts").UndefinedC]>>;
    }>;
    plan_pending: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        price: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
        currency: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        frequency: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"monthly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"yearly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"one-time">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
        is_subscribed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        can_subscribe: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        legacy_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"free">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pro">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"business">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enterprise">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"enterprise_trial">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"lite">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"pro_plus">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_free">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_pro">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_biz">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"partners_ent">>]>>;
        legacy_discount: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        externally_managed: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
        annual: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
            price: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
            frequency: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"monthly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"yearly">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"one-time">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"">>]>>;
        }>, import("io-ts").UndefinedC]>>;
    }>, import("io-ts").UndefinedC]>>;
    vanity_name_servers: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    vanity_name_servers_ips: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").RecordC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("@cloudflare/util-en-garde").ObjectCodec<{
        ipv4: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        ipv6: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>>>, import("io-ts").UndefinedC]>>;
    verification_key: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
    host: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").ObjectCodec<{
        name: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
        website: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    }>, import("io-ts").UndefinedC]>>;
    betas: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").ArrayC<import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>>>, import("io-ts").UndefinedC]>>;
    deactivation_reason: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"abuse_violation">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"plan_limits_exceeded">>]>>, import("io-ts").UndefinedC]>>;
    jump_start: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>, import("io-ts").UndefinedC]>>;
    cname_suffix: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>, import("io-ts").UndefinedC]>>;
}>;
export declare type Zone = TypeFromCodec<typeof Zone>;
export declare const ZoneBlock: import("@cloudflare/util-en-garde").ObjectCodec<{
    id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    account_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    brand_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    cadence_workflow_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    created: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    delete_reason: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    hostname: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    list_item_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    lumen_database_url: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    match_subdomain: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    match_subpath: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    path: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    protocol: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"http">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"https">>]>>;
    reference: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    review_status: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"no_review">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"requested">>]>>;
    review_date: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    ruleset_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    status: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block_active">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block_failed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block_pending">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"block_in_progress">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"delete_pending">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"delete_in_progress">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"delete_failed">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"deleted">>]>>;
    type: import("@cloudflare/util-en-garde").Codec<import("io-ts").UnionC<[import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"geo_block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"legal_block">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"phishing_interstitial">>, import("@cloudflare/util-en-garde").Codec<import("io-ts").LiteralC<"malware_interstitial">>]>>;
    updated: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    zone_id: import("@cloudflare/util-en-garde").Codec<import("io-ts").NumberC>;
    zone_plan: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
}>;
export declare type ZoneBlock = TypeFromCodec<typeof ZoneBlock>;
export declare const ZoneHold: import("@cloudflare/util-en-garde").ObjectCodec<{
    hold: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
    hold_after: import("@cloudflare/util-en-garde").Codec<import("io-ts").StringC>;
    include_subdomains: import("@cloudflare/util-en-garde").Codec<import("io-ts").BooleanC>;
}>;
export declare type ZoneHold = TypeFromCodec<typeof ZoneHold>;
