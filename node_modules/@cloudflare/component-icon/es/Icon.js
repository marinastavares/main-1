function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React from 'react';
import PropTypes from 'prop-types';
import SVG_COMPONENTS from './reactsvgs';
import iconTypes from './iconTypes';
import { createComponent } from '@cloudflare/style-container';
var DEFAULT_HEIGHT = 15;

var getHeight = function getHeight(size) {
  var height;

  switch (size) {
    case '1.2x':
      height = 18;
      break;

    case '1.5x':
      height = 22;
      break;

    case '2x':
      height = 30;
      break;

    case '2.5x':
      height = 37;
      break;

    case '3x':
      height = 45;
      break;

    case '3.5x':
      height = 52;
      break;

    case '4x':
      height = 60;
      break;

    default:
      height = DEFAULT_HEIGHT;
  }

  return height;
};

var getFill = function getFill(color, theme) {
  var fill;

  switch (color) {
    case 'default':
      fill = theme.colors.gray[4];
      break;

    case 'primary':
      fill = theme.colors.blue[4];
      break;

    case 'success':
      fill = theme.colors.green[6];
      break;

    case 'warning':
      fill = theme.colors.orange[5];
      break;

    case 'danger':
      fill = theme.colors.red[3];
      break;

    case 'black':
      fill = theme.colors.black;
      break;

    case 'white':
      fill = theme.colors.white;
      break;

    default:
      fill = theme.colors.black;
  }

  return fill;
};

var iconStyles = function iconStyles(_ref) {
  var theme = _ref.theme,
      size = _ref.size,
      color = _ref.color;
  return {
    height: size ? getHeight(size) : DEFAULT_HEIGHT,
    fill: color ? getFill(color, theme) : theme.colors.black
  };
};

var Icon =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Icon, _React$Component);

  function Icon() {
    _classCallCheck(this, Icon);

    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));
  }

  _createClass(Icon, [{
    key: "render",
    value: function render() {
      var Svg = SVG_COMPONENTS[this.props.type];
      var _this$props = this.props,
          label = _this$props.label,
          className = _this$props.className;
      return React.createElement(Svg, {
        className: className,
        label: label ? label : ''
      });
    }
  }]);

  return Icon;
}(React.Component);

Icon.propTypes = {
  className: PropTypes.string.isRequired,
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([false])]).isRequired,
  type: PropTypes.oneOf(iconTypes).isRequired,
  color: PropTypes.oneOf(['default', 'primary', 'success', 'warning', 'danger', 'black', 'white']),
  size: PropTypes.oneOf(['1.2x', '1.5x', '2x', '2.5x', '3x', '3.5x', '4x'])
};
Icon.displayName = 'Icon';
export default createComponent(iconStyles, Icon);