"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styleConst = require("@cloudflare/style-const");

var _polished = require("polished");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line behance/no-deprecated
var numberOrString = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]);

var pxToRem = function pxToRem(value) {
  if (typeof value === 'number' || /\d+px/.test(value)) {
    return (0, _polished.rem)(value, _styleConst.variables.fontSize);
  }

  return value;
}; // The export of this module is a datastructuer containing metadata
// which powers:
//  - the creation of fela style rules
//  - the creation of the theme in BoxTheme
//  - a number of safety checks
//
// At a bare minimum, the propType must be specified to support a
// new style property
//
// In addition, several other properties can be specified in the spec.
//
// Conflicts with shows an error if the developer tries to use both props.
//
// For example, given the following spec:
//
//    foo: {
//      propType: numberOrString,
//      conflictsWith: [
//        'bar',
//      ]
//    },
//
//  passing the foo and bar props to the component will cause a warning.
//
//  Providing 'preprocessWith' will cause all the provided callbacks
//  to be invoked on the passed prop when building the components styles
//
//  For example, given the following spec:
//    foo: {
//      propType: number,
//      preprocessWith: [ 'pxToRem' ]
//   },
//
//  The value of the 'foo' prop will be transformed with pxToRem.
//
//  The default property is currently un-used. They're left in place
//  in case we arrive upon a performant solution to using them (like
//  generating the code for the Box component).
//


var _default = {
  margin: {
    propType: numberOrString,
    conflictsWith: ['marginTop', 'marginBottom', 'marginLeft', 'marginRight']
  },
  marginTop: {
    propType: numberOrString,
    default: 0
  },
  marginBottom: {
    propType: numberOrString,
    default: 0
  },
  marginLeft: {
    propType: numberOrString,
    default: 0
  },
  marginRight: {
    propType: numberOrString,
    default: 0
  },
  padding: {
    propType: numberOrString,
    conflictsWith: ['paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight']
  },
  paddingTop: {
    propType: numberOrString,
    default: 0
  },
  paddingBottom: {
    propType: numberOrString,
    default: 0
  },
  paddingLeft: {
    propType: numberOrString,
    default: 0
  },
  paddingRight: {
    propType: numberOrString,
    default: 0
  },
  overflow: {
    propType: _propTypes.default.oneOf(['visible', 'hidden', 'scroll', 'auto', 'inherit', 'initial', 'unset'])
  },
  overflowX: {
    propType: _propTypes.default.oneOf(['visible', 'hidden', 'scroll', 'auto', 'inherit', 'initial', 'unset'])
  },
  border: {
    propType: _propTypes.default.string,
    conflictsWith: ['borderStyle', 'borderColor', 'borderWidth', 'borderTopColor', 'borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopStyle', 'borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopWidth', 'borderBottomWidth', 'borderLeftWidth', 'borderRightWidth']
  },
  borderLeft: {
    propType: _propTypes.default.string,
    conflictsWith: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth']
  },
  borderBottom: {
    propType: _propTypes.default.string,
    conflictsWith: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth']
  },
  borderColor: {
    propType: _propTypes.default.string,
    conflictsWith: ['borderTopColor', 'borderBottomColor', 'borderLeftColor', 'borderRightColor']
  },
  borderTopColor: {
    propType: _propTypes.default.string
  },
  borderBottomColor: {
    propType: _propTypes.default.string
  },
  borderLeftColor: {
    propType: _propTypes.default.string
  },
  borderRightColor: {
    propType: _propTypes.default.string
  },
  borderStyle: {
    propType: _propTypes.default.string,
    conflictsWith: ['borderTopStyle', 'borderBottomStyle', 'borderLeftStyle', 'borderRightStyle']
  },
  borderTopStyle: {
    propType: _propTypes.default.string
  },
  borderBottomStyle: {
    propType: _propTypes.default.string
  },
  borderLeftStyle: {
    propType: _propTypes.default.string
  },
  borderRightStyle: {
    propType: _propTypes.default.string
  },
  borderWidth: {
    propType: _propTypes.default.number,
    conflictsWith: ['borderTopWidth', 'borderBottomWidth', 'borderLeftWidth', 'borderRightWidth']
  },
  borderTopWidth: {
    propType: _propTypes.default.number
  },
  borderBottomWidth: {
    propType: _propTypes.default.number
  },
  borderLeftWidth: {
    propType: _propTypes.default.number
  },
  borderRightWidth: {
    propType: _propTypes.default.number
  },
  lineHeight: {
    propType: _propTypes.default.number,
    default: _styleConst.variables.lineHeight
  },
  fontSize: {
    propType: numberOrString,
    default: _styleConst.variables.fontSize
  },
  fontWeight: {
    propType: numberOrString,
    default: _styleConst.variables.fontWeight
  },
  fontFamily: {
    propType: _propTypes.default.string,
    default: _styleConst.variables.fontFamily
  },
  color: {
    propType: _propTypes.default.string,
    default: _styleConst.variables.colors.gray[1]
  },
  backgroundColor: {
    propType: _propTypes.default.string,
    default: 'transparent'
  },
  backgroundImage: {
    propType: _propTypes.default.string
  },
  backgroundPosition: {
    propType: _propTypes.default.string
  },
  backgroundPositionX: {
    propType: _propTypes.default.string
  },
  backgroundPositionY: {
    propType: _propTypes.default.string
  },
  display: {
    propType: _propTypes.default.oneOf(['inline', 'block', 'inline-block', 'flex', 'inline-flex', 'table', 'table-cell', 'none']),
    default: 'block'
  },
  position: {
    propType: _propTypes.default.oneOf(['static', 'relative', 'absolute', 'fixed']),
    default: 'static'
  },
  float: {
    propType: _propTypes.default.oneOf(['left', 'right', 'none', 'inline-start', 'inline-end'])
  },
  top: {
    propType: numberOrString,
    default: 'auto',
    preprocessWith: [pxToRem]
  },
  bottom: {
    propType: numberOrString,
    default: 'auto',
    preprocessWith: [pxToRem]
  },
  left: {
    propType: numberOrString,
    default: 'auto',
    preprocessWith: [pxToRem]
  },
  right: {
    propType: numberOrString,
    default: 'auto',
    preprocessWith: [pxToRem]
  },
  width: {
    propType: numberOrString,
    default: 'auto',
    preprocessWith: [pxToRem]
  },
  height: {
    propType: numberOrString,
    default: 'auto',
    preprocessWith: [pxToRem]
  },
  minWidth: {
    propType: numberOrString,
    default: 0,
    preprocessWith: [pxToRem]
  },
  minHeight: {
    propType: numberOrString,
    default: 0,
    preprocessWith: [pxToRem]
  },
  maxWidth: {
    propType: numberOrString,
    default: 0,
    preprocessWith: [pxToRem]
  },
  maxHeight: {
    propType: numberOrString,
    default: 0,
    preprocessWith: [pxToRem]
  },
  verticalAlign: {
    propType: numberOrString,
    default: 'baseline'
  },
  transform: {
    propType: _propTypes.default.string
  },
  flexDirection: {
    propType: _propTypes.default.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    default: 'row'
  },
  flexWrap: {
    propType: _propTypes.default.oneOf(['nowrap', 'wrap', 'wrap-reverse']),
    default: 'nowrap'
  },
  justifyContent: {
    propType: _propTypes.default.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around']),
    default: 'flex-start'
  },
  alignItems: {
    propType: _propTypes.default.oneOf(['flex-start', 'flex-end', 'center', 'baseline', 'stretch']),
    default: 'stretch'
  },
  alignContent: {
    propType: _propTypes.default.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'stretch']),
    default: 'stretch'
  },
  order: {
    propType: _propTypes.default.number,
    default: 0
  },
  flexGrow: {
    propType: _propTypes.default.number,
    default: 0
  },
  flexShrink: {
    propType: _propTypes.default.number,
    default: 1
  },
  flexBasis: {
    propType: numberOrString,
    default: 'auto'
  },
  flex: {
    propType: _propTypes.default.string
  },
  alignSelf: {
    propType: _propTypes.default.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch']),
    default: 'auto'
  },
  zIndex: {
    propType: numberOrString,
    default: 'auto'
  },
  textAlign: {
    propType: _propTypes.default.oneOf(['left', 'right', 'center', 'justify', 'justify-all', 'start', 'end', 'match-parent']),
    default: 'start'
  },
  textDecoration: {
    propType: _propTypes.default.oneOf(['none', 'underline', 'overline', 'line-through', 'initial', 'inherit']),
    default: 'initial'
  },
  textTransform: {
    propType: _propTypes.default.oneOf(['none', 'capitalize', 'uppercase', 'lowercase', 'full-width']),
    default: 'none'
  },
  opacity: {
    propType: numberOrString,
    default: 1.0
  },
  userSelect: {
    propType: _propTypes.default.oneOf(['none', 'auto', 'text', 'container', 'all']),
    default: 'auto'
  },
  wordWrap: {
    propType: _propTypes.default.oneOf(['normal', 'break-word', 'inherit', 'initial', 'unset']),
    default: 'normal'
  },
  clear: {
    propType: _propTypes.default.oneOf(['none', 'left', 'right', 'both', 'initial', 'inherit']),
    default: 'none'
  }
};
/*
 * Need support for:
   content
   outline
   border-radius
   box-shadow
*/

exports.default = _default;