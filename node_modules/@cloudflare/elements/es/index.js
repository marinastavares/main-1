function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { color, space, fontSize, fontFamily, fontWeight, fontStyle, lineHeight, textAlign, display, width, maxWidth, minWidth, height, maxHeight, minHeight, flex, flexDirection, flexWrap, flexGrow, flexShrink, flexBasis, alignContent, alignItems, alignSelf, justifyContent, justifyItems, justifySelf, verticalAlign, letterSpacing, order, borders as origBorders, borderColor, borderRadius, backgroundImage, backgroundSize, backgroundPosition, backgroundRepeat, overflow, overflowX, overflowY, opacity, style, position, top, bottom, left, right, zIndex, gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea, boxShadow } from 'styled-system';
import { system } from '@styled-system/core';
import { createComponent } from '@cloudflare/style-container'; // `fela` has issues with rule ordering idempotence and reliability, hence these custom functions.
// See https://github.com/jxnblk/styled-system/issues/133

var borderWidth = style({
  prop: 'borderWidth'
});
var borderStyle = style({
  prop: 'borderStyle'
});
var borderTopLeftRadius = style({
  prop: 'borderTopLeftRadius'
});
var borderTopRightRadius = style({
  prop: 'borderTopRightRadius'
});
var borderBottomRightRadius = style({
  prop: 'borderBottomRightRadius'
});
var borderBottomLeftRadius = style({
  prop: 'borderBottomLeftRadius'
});
var borderTopColor = style({
  prop: 'borderTopColor',
  key: 'colors'
});
var borderRightColor = style({
  prop: 'borderRightColor',
  key: 'colors'
});
var borderBottomColor = style({
  prop: 'borderBottomColor',
  key: 'colors'
});
var borderLeftColor = style({
  prop: 'borderLeftColor',
  key: 'colors'
});
var listStyle = style({
  prop: 'listStyle'
});
var listStyleImage = style({
  prop: 'listStyleImage'
});
var listStylePosition = style({
  prop: 'listStylePosition'
});
var listStyleType = style({
  prop: 'listStyleType'
});
var tableLayout = style({
  prop: 'tableLayout'
});
var pointerEvents = style({
  prop: 'pointerEvents'
});
var resize = style({
  prop: 'resize'
});
var textDecoration = style({
  prop: 'textDecoration'
});
var textTransform = style({
  prop: 'textTransform'
});
var textOverflow = style({
  prop: 'textOverflow'
});
var userSelect = style({
  prop: 'userSelect'
});
var whiteSpace = style({
  prop: 'whiteSpace'
});
var wordBreak = style({
  prop: 'wordBreak'
});
var wordWrap = style({
  prop: 'wordWrap'
});
var visibility = style({
  prop: 'visibility'
});
var transform = style({
  prop: 'transform'
});
var transition = style({
  prop: 'transition'
});
var overflowWrap = style({
  prop: 'overflowWrap'
});
var outline = style({
  prop: 'outline'
});
var fill = style({
  prop: 'fill',
  key: 'colors'
});
var gridTemplate = style({
  prop: 'gridTemplate'
});
var borderStyleWidthKeys = new Set(['border', 'borderTop', 'borderRight', 'borderBottom', 'borderLeft', 'borderX', 'borderY']);
var cursor = style({
  prop: 'cursor'
});

var borders = props => {
  var borderStyles = origBorders(props);
  return Object.entries(borderStyles).reduce((acc, _ref) => {
    var [key, value] = _ref;

    if (borderStyleWidthKeys.has(key)) {
      var [_width, _style] = value.split(' ');
      acc["".concat(key, "Width")] = _width;
      acc["".concat(key, "Style")] = _style;
      return acc;
    }

    acc[key] = value;
    return acc;
  }, {});
};

var gap = system({
  gap: {
    scale: 'space',
    property: 'gap'
  },
  rowGap: {
    scale: 'space',
    property: 'rowGap'
  },
  columnGap: {
    scale: 'space',
    property: 'columnGap'
  }
});

var merge = function merge() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.filter(obj => obj).reduce((a, b) => {
    Object.keys(b).forEach(key => {
      if (a[key] && typeof a[key] === 'object') {
        a[key] = _objectSpread(_objectSpread({}, a[key]), b[key]);
      } else {
        a[key] = b[key];
      }
    });
    return a;
  }, {});
};

var createElement = tag => createComponent(origProps => {
  var props = _objectSpread(_objectSpread({}, origProps), {}, {
    theme: _objectSpread(_objectSpread({}, origProps.theme), {}, {
      // Re-format our theme's 'breakpoints' property into an array subset
      breakpoints: [origProps.theme.breakpoints.tablet, origProps.theme.breakpoints.desktop]
    })
  }); // Merge together all styled-system props (and responsive properties)


  var properties = merge( // Core
  color(props), space(props), transform(props), transition(props), // Typography
  fontSize(props), fontFamily(props), fontWeight(props), fontStyle(props), lineHeight(props), textAlign(props), textDecoration(props), textOverflow(props), letterSpacing(props), // Layout
  display(props), width(props), maxWidth(props), minWidth(props), height(props), maxHeight(props), minHeight(props), position(props), top(props), bottom(props), left(props), right(props), // Flexbox
  flex(props), flexDirection(props), flexWrap(props), flexGrow(props), flexShrink(props), flexBasis(props), alignContent(props), alignItems(props), alignSelf(props), justifyContent(props), justifyItems(props), justifySelf(props), order(props), verticalAlign(props), // Grid
  gridColumn(props), gridRow(props), gridArea(props), gridTemplate(props), gridTemplateAreas(props), gridTemplateColumns(props), gridTemplateRows(props), gridGap(props), gridColumnGap(props), gridRowGap(props), gridAutoColumns(props), gridAutoRows(props), gridAutoFlow(props), // Border
  borders(props), borderWidth(props), borderStyle(props), borderColor(props), borderTopColor(props), borderRightColor(props), borderBottomColor(props), borderLeftColor(props), borderRadius(props), borderTopLeftRadius(props), borderTopRightRadius(props), borderBottomRightRadius(props), borderBottomLeftRadius(props), // Background
  backgroundImage(props), backgroundSize(props), backgroundPosition(props), backgroundRepeat(props), // Misc.
  boxShadow(props), cursor(props), listStyle(props), listStyleImage(props), listStylePosition(props), listStyleType(props), tableLayout(props), opacity(props), overflow(props), overflowX(props), overflowY(props), pointerEvents(props), resize(props), userSelect(props), whiteSpace(props), wordBreak(props), wordWrap(props), overflowWrap(props), textTransform(props), visibility(props), zIndex(props), fill(props), outline(props), gap(props)); // Fix for columnGap properties remaining as numbers instead of having 'px'
  // appended due to styled-system bug
  // See https://github.com/styled-system/styled-system/issues/763

  if (typeof properties.columnGap === 'number') {
    properties.columnGap = "".concat(properties.columnGap, "px");
  }

  return properties;
}, tag); // Export individual elements


export var Address = createElement('address');
export var Article = createElement('article');
export var FigCaption = createElement('figcaption');
export var Figure = createElement('figure');
export var Main = createElement('main');
export var Aside = createElement('aside');
export var Section = createElement('section');
export var Nav = createElement('nav');
export var Div = createElement('div');
export var H1 = createElement('h1');
export var H2 = createElement('h2');
export var H3 = createElement('h3');
export var H4 = createElement('h4');
export var H5 = createElement('h5');
export var Form = createElement('form');
export var P = createElement('p');
export var A = createElement('a');
export var Label = createElement('label');
export var Pre = createElement('pre');
export var Output = createElement('output');
export var Small = createElement('small');
export var Strong = createElement('strong');
export var I = createElement('i');
export var Em = createElement('em');
export var Dl = createElement('dl');
export var Dd = createElement('dd');
export var Dt = createElement('dt');
export var Span = createElement('span');
export var Ul = createElement('ul');
export var Ol = createElement('ol');
export var Li = createElement('li');
export var Header = createElement('header');
export var Footer = createElement('footer');
export var Table = createElement('table');
export var Tbody = createElement('tbody');
export var Td = createElement('td');
export var Th = createElement('th');
export var Thead = createElement('thead');
export var Hr = createElement('hr');
export var Tr = createElement('tr');
export var Input = createElement('input');
export var Select = createElement('select');
export var Sup = createElement('sup');
export var Textarea = createElement('textarea');
export var Button = createElement('button');
export var Img = createElement('img');
export var Details = createElement('details');
export var Summary = createElement('summary');
export var Code = createElement('code');
export var Svg = createElement('svg');
export var Path = createElement('path');
export var Fieldset = createElement('fieldset');
export var Legend = createElement('legend');