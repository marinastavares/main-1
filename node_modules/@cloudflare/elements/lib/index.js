"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ul = exports.Tr = exports.Thead = exports.Th = exports.Textarea = exports.Td = exports.Tbody = exports.Table = exports.Svg = exports.Sup = exports.Summary = exports.Strong = exports.Span = exports.Small = exports.Select = exports.Section = exports.Pre = exports.Path = exports.P = exports.Output = exports.Ol = exports.Nav = exports.Main = exports.Li = exports.Legend = exports.Label = exports.Input = exports.Img = exports.I = exports.Hr = exports.Header = exports.H5 = exports.H4 = exports.H3 = exports.H2 = exports.H1 = exports.Form = exports.Footer = exports.Figure = exports.FigCaption = exports.Fieldset = exports.Em = exports.Dt = exports.Dl = exports.Div = exports.Details = exports.Dd = exports.Code = exports.Button = exports.Aside = exports.Article = exports.Address = exports.A = void 0;

var _styledSystem = require("styled-system");

var _core = require("@styled-system/core");

var _styleContainer = require("@cloudflare/style-container");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// `fela` has issues with rule ordering idempotence and reliability, hence these custom functions.
// See https://github.com/jxnblk/styled-system/issues/133
var borderWidth = (0, _styledSystem.style)({
  prop: 'borderWidth'
});
var borderStyle = (0, _styledSystem.style)({
  prop: 'borderStyle'
});
var borderTopLeftRadius = (0, _styledSystem.style)({
  prop: 'borderTopLeftRadius'
});
var borderTopRightRadius = (0, _styledSystem.style)({
  prop: 'borderTopRightRadius'
});
var borderBottomRightRadius = (0, _styledSystem.style)({
  prop: 'borderBottomRightRadius'
});
var borderBottomLeftRadius = (0, _styledSystem.style)({
  prop: 'borderBottomLeftRadius'
});
var borderTopColor = (0, _styledSystem.style)({
  prop: 'borderTopColor',
  key: 'colors'
});
var borderRightColor = (0, _styledSystem.style)({
  prop: 'borderRightColor',
  key: 'colors'
});
var borderBottomColor = (0, _styledSystem.style)({
  prop: 'borderBottomColor',
  key: 'colors'
});
var borderLeftColor = (0, _styledSystem.style)({
  prop: 'borderLeftColor',
  key: 'colors'
});
var listStyle = (0, _styledSystem.style)({
  prop: 'listStyle'
});
var listStyleImage = (0, _styledSystem.style)({
  prop: 'listStyleImage'
});
var listStylePosition = (0, _styledSystem.style)({
  prop: 'listStylePosition'
});
var listStyleType = (0, _styledSystem.style)({
  prop: 'listStyleType'
});
var tableLayout = (0, _styledSystem.style)({
  prop: 'tableLayout'
});
var pointerEvents = (0, _styledSystem.style)({
  prop: 'pointerEvents'
});
var resize = (0, _styledSystem.style)({
  prop: 'resize'
});
var textDecoration = (0, _styledSystem.style)({
  prop: 'textDecoration'
});
var textTransform = (0, _styledSystem.style)({
  prop: 'textTransform'
});
var textOverflow = (0, _styledSystem.style)({
  prop: 'textOverflow'
});
var userSelect = (0, _styledSystem.style)({
  prop: 'userSelect'
});
var whiteSpace = (0, _styledSystem.style)({
  prop: 'whiteSpace'
});
var wordBreak = (0, _styledSystem.style)({
  prop: 'wordBreak'
});
var wordWrap = (0, _styledSystem.style)({
  prop: 'wordWrap'
});
var visibility = (0, _styledSystem.style)({
  prop: 'visibility'
});
var transform = (0, _styledSystem.style)({
  prop: 'transform'
});
var transition = (0, _styledSystem.style)({
  prop: 'transition'
});
var overflowWrap = (0, _styledSystem.style)({
  prop: 'overflowWrap'
});
var outline = (0, _styledSystem.style)({
  prop: 'outline'
});
var fill = (0, _styledSystem.style)({
  prop: 'fill',
  key: 'colors'
});
var gridTemplate = (0, _styledSystem.style)({
  prop: 'gridTemplate'
});
var borderStyleWidthKeys = new Set(['border', 'borderTop', 'borderRight', 'borderBottom', 'borderLeft', 'borderX', 'borderY']);
var cursor = (0, _styledSystem.style)({
  prop: 'cursor'
});

var borders = function borders(props) {
  var borderStyles = (0, _styledSystem.borders)(props);
  return Object.entries(borderStyles).reduce(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    if (borderStyleWidthKeys.has(key)) {
      var _value$split = value.split(' '),
          _value$split2 = _slicedToArray(_value$split, 2),
          _width = _value$split2[0],
          _style = _value$split2[1];

      acc["".concat(key, "Width")] = _width;
      acc["".concat(key, "Style")] = _style;
      return acc;
    }

    acc[key] = value;
    return acc;
  }, {});
};

var gap = (0, _core.system)({
  gap: {
    scale: 'space',
    property: 'gap'
  },
  rowGap: {
    scale: 'space',
    property: 'rowGap'
  },
  columnGap: {
    scale: 'space',
    property: 'columnGap'
  }
});

var merge = function merge() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.filter(function (obj) {
    return obj;
  }).reduce(function (a, b) {
    Object.keys(b).forEach(function (key) {
      if (a[key] && _typeof(a[key]) === 'object') {
        a[key] = _objectSpread(_objectSpread({}, a[key]), b[key]);
      } else {
        a[key] = b[key];
      }
    });
    return a;
  }, {});
};

var createElement = function createElement(tag) {
  return (0, _styleContainer.createComponent)(function (origProps) {
    var props = _objectSpread(_objectSpread({}, origProps), {}, {
      theme: _objectSpread(_objectSpread({}, origProps.theme), {}, {
        // Re-format our theme's 'breakpoints' property into an array subset
        breakpoints: [origProps.theme.breakpoints.tablet, origProps.theme.breakpoints.desktop]
      })
    }); // Merge together all styled-system props (and responsive properties)


    var properties = merge( // Core
    (0, _styledSystem.color)(props), (0, _styledSystem.space)(props), transform(props), transition(props), // Typography
    (0, _styledSystem.fontSize)(props), (0, _styledSystem.fontFamily)(props), (0, _styledSystem.fontWeight)(props), (0, _styledSystem.fontStyle)(props), (0, _styledSystem.lineHeight)(props), (0, _styledSystem.textAlign)(props), textDecoration(props), textOverflow(props), (0, _styledSystem.letterSpacing)(props), // Layout
    (0, _styledSystem.display)(props), (0, _styledSystem.width)(props), (0, _styledSystem.maxWidth)(props), (0, _styledSystem.minWidth)(props), (0, _styledSystem.height)(props), (0, _styledSystem.maxHeight)(props), (0, _styledSystem.minHeight)(props), (0, _styledSystem.position)(props), (0, _styledSystem.top)(props), (0, _styledSystem.bottom)(props), (0, _styledSystem.left)(props), (0, _styledSystem.right)(props), // Flexbox
    (0, _styledSystem.flex)(props), (0, _styledSystem.flexDirection)(props), (0, _styledSystem.flexWrap)(props), (0, _styledSystem.flexGrow)(props), (0, _styledSystem.flexShrink)(props), (0, _styledSystem.flexBasis)(props), (0, _styledSystem.alignContent)(props), (0, _styledSystem.alignItems)(props), (0, _styledSystem.alignSelf)(props), (0, _styledSystem.justifyContent)(props), (0, _styledSystem.justifyItems)(props), (0, _styledSystem.justifySelf)(props), (0, _styledSystem.order)(props), (0, _styledSystem.verticalAlign)(props), // Grid
    (0, _styledSystem.gridColumn)(props), (0, _styledSystem.gridRow)(props), (0, _styledSystem.gridArea)(props), gridTemplate(props), (0, _styledSystem.gridTemplateAreas)(props), (0, _styledSystem.gridTemplateColumns)(props), (0, _styledSystem.gridTemplateRows)(props), (0, _styledSystem.gridGap)(props), (0, _styledSystem.gridColumnGap)(props), (0, _styledSystem.gridRowGap)(props), (0, _styledSystem.gridAutoColumns)(props), (0, _styledSystem.gridAutoRows)(props), (0, _styledSystem.gridAutoFlow)(props), // Border
    borders(props), borderWidth(props), borderStyle(props), (0, _styledSystem.borderColor)(props), borderTopColor(props), borderRightColor(props), borderBottomColor(props), borderLeftColor(props), (0, _styledSystem.borderRadius)(props), borderTopLeftRadius(props), borderTopRightRadius(props), borderBottomRightRadius(props), borderBottomLeftRadius(props), // Background
    (0, _styledSystem.backgroundImage)(props), (0, _styledSystem.backgroundSize)(props), (0, _styledSystem.backgroundPosition)(props), (0, _styledSystem.backgroundRepeat)(props), // Misc.
    (0, _styledSystem.boxShadow)(props), cursor(props), listStyle(props), listStyleImage(props), listStylePosition(props), listStyleType(props), tableLayout(props), (0, _styledSystem.opacity)(props), (0, _styledSystem.overflow)(props), (0, _styledSystem.overflowX)(props), (0, _styledSystem.overflowY)(props), pointerEvents(props), resize(props), userSelect(props), whiteSpace(props), wordBreak(props), wordWrap(props), overflowWrap(props), textTransform(props), visibility(props), (0, _styledSystem.zIndex)(props), fill(props), outline(props), gap(props)); // Fix for columnGap properties remaining as numbers instead of having 'px'
    // appended due to styled-system bug
    // See https://github.com/styled-system/styled-system/issues/763

    if (typeof properties.columnGap === 'number') {
      properties.columnGap = "".concat(properties.columnGap, "px");
    }

    return properties;
  }, tag);
}; // Export individual elements


var Address = createElement('address');
exports.Address = Address;
var Article = createElement('article');
exports.Article = Article;
var FigCaption = createElement('figcaption');
exports.FigCaption = FigCaption;
var Figure = createElement('figure');
exports.Figure = Figure;
var Main = createElement('main');
exports.Main = Main;
var Aside = createElement('aside');
exports.Aside = Aside;
var Section = createElement('section');
exports.Section = Section;
var Nav = createElement('nav');
exports.Nav = Nav;
var Div = createElement('div');
exports.Div = Div;
var H1 = createElement('h1');
exports.H1 = H1;
var H2 = createElement('h2');
exports.H2 = H2;
var H3 = createElement('h3');
exports.H3 = H3;
var H4 = createElement('h4');
exports.H4 = H4;
var H5 = createElement('h5');
exports.H5 = H5;
var Form = createElement('form');
exports.Form = Form;
var P = createElement('p');
exports.P = P;
var A = createElement('a');
exports.A = A;
var Label = createElement('label');
exports.Label = Label;
var Pre = createElement('pre');
exports.Pre = Pre;
var Output = createElement('output');
exports.Output = Output;
var Small = createElement('small');
exports.Small = Small;
var Strong = createElement('strong');
exports.Strong = Strong;
var I = createElement('i');
exports.I = I;
var Em = createElement('em');
exports.Em = Em;
var Dl = createElement('dl');
exports.Dl = Dl;
var Dd = createElement('dd');
exports.Dd = Dd;
var Dt = createElement('dt');
exports.Dt = Dt;
var Span = createElement('span');
exports.Span = Span;
var Ul = createElement('ul');
exports.Ul = Ul;
var Ol = createElement('ol');
exports.Ol = Ol;
var Li = createElement('li');
exports.Li = Li;
var Header = createElement('header');
exports.Header = Header;
var Footer = createElement('footer');
exports.Footer = Footer;
var Table = createElement('table');
exports.Table = Table;
var Tbody = createElement('tbody');
exports.Tbody = Tbody;
var Td = createElement('td');
exports.Td = Td;
var Th = createElement('th');
exports.Th = Th;
var Thead = createElement('thead');
exports.Thead = Thead;
var Hr = createElement('hr');
exports.Hr = Hr;
var Tr = createElement('tr');
exports.Tr = Tr;
var Input = createElement('input');
exports.Input = Input;
var Select = createElement('select');
exports.Select = Select;
var Sup = createElement('sup');
exports.Sup = Sup;
var Textarea = createElement('textarea');
exports.Textarea = Textarea;
var Button = createElement('button');
exports.Button = Button;
var Img = createElement('img');
exports.Img = Img;
var Details = createElement('details');
exports.Details = Details;
var Summary = createElement('summary');
exports.Summary = Summary;
var Code = createElement('code');
exports.Code = Code;
var Svg = createElement('svg');
exports.Svg = Svg;
var Path = createElement('path');
exports.Path = Path;
var Fieldset = createElement('fieldset');
exports.Fieldset = Fieldset;
var Legend = createElement('legend');
exports.Legend = Legend;