"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectKeys = objectKeys;
exports.hasProperties = hasProperties;
exports.hasAtLeastTwo = void 0;

/**
 * Force TS to load a type that has not been computed
 * (to resolve composed types that TS hasn't resolved).
 * https://pirix-gh.github.io/ts-toolbelt/modules/_any_compute_.html
 *
 * @example
 * // becomes {foo: string, baz: boolean}
 * type Foo = Compute<{bar: string} & {baz: boolean}>
 */

/**
 *  Generates the typings for usage with Object.keys
 *
 *  @example
 *  const Locations = { "Cina": "Austin", "John": "Austin", "Kevin": "Austin", "Nicky": "San Francisco", "Robert": "San Francisco" }
 *  const KeysFromLocations = objectKeys(Locations)
 */
function objectKeys(t) {
  return Object.keys(t);
}
/**
 * ValueOf: similar to keyof, but picks a value.
 *
 * @example
 * type Person = {
 *   name: string,
 *   phone: number | null
 * }
 *
 * type PhoneType = ValueOf<Person>; // string | number | null
 */


var hasAtLeastTwo = function hasAtLeastTwo(ts) {
  return ts.length > 1;
};

exports.hasAtLeastTwo = hasAtLeastTwo;

function hasProperties(obj) {
  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    keys[_key - 1] = arguments[_key];
  }

  return !!obj && keys.every(function (key) {
    return obj.hasOwnProperty(key);
  });
}