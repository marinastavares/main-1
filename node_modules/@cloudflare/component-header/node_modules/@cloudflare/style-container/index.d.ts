declare module '@cloudflare/style-container' {
  import * as React from 'react';
  import { variables } from '@cloudflare/style-const';

  export { ThemeProvider } from 'react-fela';

  type DisplayNameFn = (name: string) => void;

  export type TRuleCSSPropsAndSelectors =
    | React.CSSProperties
    | {
        [selector: string]: React.CSSProperties;
      };

  export type TRule<T = {}> = (attrs?: T) => TRuleCSSPropsAndSelectors;
  export type TTheme<P> =
    | P
    | ((props: P) => { [key: string]: any } & React.CSSProperties);
  export type TComponent<P> =
    | React.ComponentClass<P>
    | React.StatelessComponent<P>;

  export function createComponent<T, P = {}>(
    rule: TRule<T & { theme?: typeof variables }>,
    type?: string | HTMLElement | TComponent<P>,
    passThroughProps?: string[]
  ): React.StatelessComponent<Partial<T & P>> & {
    setDisplayName: DisplayNameFn;
  };

  export function createStyledComponent<T, P = {}>(
    rule: TRule<
      T & { theme?: typeof variables } & {
        m?: string;
        ml?: string;
        mr?: string;
        mt?: string;
        mb?: string;
        mx?: string;
        my?: string;
        p?: string;
        pl?: string;
        pr?: string;
        pt?: string;
        pb?: string;
        px?: string;
        py?: string;
      }
    >,
    type?: string | HTMLElement | TComponent<P>,
    passThroughProps?: string[]
  ): React.StatelessComponent<Partial<T & P>> & {
    setDisplayName: DisplayNameFn;
  };

  export function applyTheme<A, B>(
    a: TComponent<A>,
    b: TTheme<B>
  ): React.StatelessComponent<A>;
  export function applyTheme<A, B, C>(
    a: TComponent<A>,
    b: TTheme<B>,
    c: TTheme<C>
  ): React.StatelessComponent<A>;

  export function combineRules<A, B>(a: TRule<A>, b: TRule<B>): TRule<A & B>;
  export function combineRules<A, B, C>(
    a: TRule<A>,
    b: TRule<B>,
    c: TRule<C>
  ): TRule<A & B & C>;

  export default createComponent;
}
