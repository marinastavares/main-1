/* eslint-disable behance/no-deprecated */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { withTheme, ThemeProvider } from 'react-fela'; // eslint-disable-line behance/no-deprecated
import mergeThemes from './mergeThemes';
import { hocDisplayName, addDisplayName } from './displayName';

export const getDisplayName = hocDisplayName('Themed');

const applyTheme = (ComponentToWrap, ...themes) => {
  if (!ComponentToWrap) {
    throw new InvalidComponentError(ComponentToWrap);
  }

  class ThemedComponent extends Component {
    render() {
      return (
        <ThemeProvider theme={mergeThemes(this.props.theme || {}, ...themes)}>
          <ComponentToWrap {...this.props} />
        </ThemeProvider>
      );
    }
  }

  ThemedComponent._isFelaComponent = true;
  ThemedComponent.propTypes = {
    theme: PropTypes.object
  };

  const WithThemeHOC = withTheme(ThemedComponent);
  addDisplayName(WithThemeHOC, ComponentToWrap, getDisplayName);

  return WithThemeHOC;
};

export default applyTheme;

export class InvalidComponentError extends Error {
  constructor(component) {
    super(`applyTheme received an invalid first argument: ${component}`);
    this.component = component;
  }
}
