var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

import defaultIsUnitlessProperty from 'css-in-js-utils/lib/isUnitlessProperty';
import isPlainObject from 'isobject';

function addUnitIfNeeded(value, propertyUnit) {
  var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  /* eslint-disable eqeqeq */
  if ((valueType === 'number' || valueType === 'string' && value == parseFloat(value)) && value != 0) {
    return value + propertyUnit;
  }
  /* eslint-enable */
  return value;
}

function addUnit(style, defaultUnit, propertyMap, isUnitlessProperty) {
  for (var property in style) {
    if (!isUnitlessProperty(property)) {
      (function () {
        var cssValue = style[property];
        var propertyUnit = propertyMap[property] || defaultUnit;

        if (isPlainObject(cssValue)) {
          style[property] = addUnit(cssValue, defaultUnit, propertyMap, isUnitlessProperty);
        } else if (Array.isArray(cssValue)) {
          style[property] = cssValue.map(function (val) {
            return addUnitIfNeeded(val, propertyUnit);
          });
        } else {
          style[property] = addUnitIfNeeded(cssValue, propertyUnit);
        }
      })();
    }
  }

  return style;
}

function createOptimized(defaultUnit, propertyMap, isUnitlessProperty) {
  return function (props) {
    if (!isUnitlessProperty(props.property)) {
      var valueType = _typeof(props.value);
      /* eslint-disable eqeqeq */
      if ((valueType === 'number' || valueType === 'string' && props.value == parseFloat(props.value)) && props.value != 0) {
        var _unit = propertyMap[props.property] || defaultUnit;
        props.value += _unit;
      }

      // handle arrays
      if (Array.isArray(props.value)) {
        var propertyUnit = propertyMap[props.property] || defaultUnit;

        props.value = props.value.map(function (value) {
          return addUnitIfNeeded(value, propertyUnit);
        });
      }
    }

    return props;
  };
}

export default function unit() {
  var defaultUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'px';
  var propertyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var isUnitlessProperty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIsUnitlessProperty;

  var plugin = function plugin(style) {
    return addUnit(style, defaultUnit, propertyMap, isUnitlessProperty);
  };

  plugin.optimized = createOptimized(defaultUnit, propertyMap, isUnitlessProperty);

  return plugin;
}