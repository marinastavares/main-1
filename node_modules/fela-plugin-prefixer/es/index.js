var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { prefix } from 'inline-style-prefixer';
import { prefix as stylisPrefix } from 'stylis';
import cssifyObject from 'css-in-js-utils/lib/cssifyObject';
import cssifyDeclaration from 'css-in-js-utils/lib/cssifyDeclaration';
import camelCaseProperty from 'css-in-js-utils/lib/camelCaseProperty';
import objectReduce from 'fast-loops/lib/objectReduce';

import fallbackValue from 'fela-plugin-fallback-value';
import isPlainObject from 'isobject';

var resolveFallbackValues = fallbackValue();

function addVendorPrefixes(style) {
  return objectReduce(style, function (prefixedStyle, value, property) {
    if (isPlainObject(value)) {
      prefixedStyle[property] = addVendorPrefixes(value);
    } else {
      var prefixedDeclaration = prefix(_defineProperty({}, property, style[property]));
      var styleKeys = Object.keys(prefixedDeclaration);

      var referenceProperty = styleKeys[0];
      var referenceValue = prefixedDeclaration[referenceProperty];

      if (styleKeys.length === 1) {
        prefixedStyle[referenceProperty] = referenceValue;
      } else {
        delete prefixedDeclaration[referenceProperty];
        var inlinedProperties = cssifyObject(resolveFallbackValues(prefixedDeclaration));

        prefixedStyle[referenceProperty] = referenceValue + ';' + inlinedProperties;
      }
    }

    return prefixedStyle;
  }, {});
}

addVendorPrefixes.optimized = function (props) {
  var cssDeclaration = cssifyDeclaration(props.property, props.value) + ';';
  var prefixed = stylisPrefix(cssDeclaration, props.property.length);

  if (prefixed !== cssDeclaration) {
    var _prefixed$split = prefixed.split(/:(.+)/),
        _prefixed$split2 = _slicedToArray(_prefixed$split, 2),
        property = _prefixed$split2[0],
        value = _prefixed$split2[1];
    // TODO: do we really need to camelCase here?


    props.property = camelCaseProperty(property);
    props.value = value.slice(0, -1);
  }

  return props;
};

export default (function () {
  return addVendorPrefixes;
});