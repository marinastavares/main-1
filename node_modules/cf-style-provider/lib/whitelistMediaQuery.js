'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = whitelistMediaQuery;
const isObject = value => typeof value === 'object' && !Array.isArray(value);

const flipKeysAndValues = input => Object.keys(input).reduce((obj, key) => _extends({}, obj, { [input[key]]: key }), {});

function checkMediaQuery(style, mediaQueryMap, aliases) {
  for (const property in style) {
    if (style.hasOwnProperty(property)) {
      const value = style[property];

      if (isObject(value)) {
        checkMediaQuery(value, mediaQueryMap, aliases);
        if (property.substring(0, 6) === '@media' && !mediaQueryMap.hasOwnProperty(property)) {
          console.warn(`Please don't use "${property}". Use one of the aliases: ${aliases.join(', ')}.
More info: https://github.com/cloudflare/cf-ui/tree/master/packages/cf-style-provider#named-media-query`);
        }
      }
    }
  }
  return style;
}

function whitelistMediaQuery(mediaQueryMap) {
  return style => checkMediaQuery(style, flipKeysAndValues(mediaQueryMap), Object.keys(mediaQueryMap));
}