import { createRenderer as createFelaRenderer } from 'fela'; // eslint-disable-line behance/no-deprecated
import prefixer from 'fela-plugin-prefixer';
import fallbackValue from 'fela-plugin-fallback-value';
import unit from 'fela-plugin-unit';
import lvha from 'fela-plugin-lvha';
import embedded from 'fela-plugin-embedded';
import namedMediaQuery from 'fela-plugin-named-media-query';
import { variables } from 'cf-style-const'; // eslint-disable-line behance/no-deprecated

var defaultOpts = {
  dev: false
};

var mediaQueries = {
  mobile: '@media (min-width: ' + variables.breakpoints.mobile + ')',
  mobileWide: '@media (min-width: ' + variables.breakpoints.mobileWide + ')',
  tablet: '@media (min-width: ' + variables.breakpoints.tablet + ')',
  tabletLegacy: '@media (min-width: ' + variables.breakpoints.tabletLegacy + ')',
  tabletWide: '@media (min-width: ' + variables.breakpoints.tabletWide + ')',
  desktop: '@media (min-width: ' + variables.breakpoints.desktop + ')',
  desktopLegacy: '@media (min-width: ' + variables.breakpoints.desktopLegacy + ')',
  desktopLarge: '@media (min-width: ' + variables.breakpoints.desktopLarge + ')',
  hover: '@media (hover)'
};

var removePrefix = function removePrefix(query) {
  return query.replace('@media ', '');
};

var createRenderer = function createRenderer(opts) {
  var usedOpts = Object.assign({}, defaultOpts, opts);
  var plugins = [prefixer(), fallbackValue(), unit(), lvha(), embedded(), namedMediaQuery(mediaQueries)];
  var enhancers = [];

  if (usedOpts.dev === true) {
    var validator = require('fela-plugin-validator').default;
    var whitelistMediaQuery = require('./whitelistMediaQuery').default;
    var beautifier = require('fela-beautifier').default;
    plugins.push(validator());
    plugins.push(whitelistMediaQuery(mediaQueries));
    enhancers.push(beautifier());
  }

  return createFelaRenderer({
    plugins: plugins,
    enhancers: enhancers,
    selectorPrefix: usedOpts.selectorPrefix,
    mediaQueryOrder: [removePrefix(mediaQueries.hover), removePrefix(mediaQueries.mobile), removePrefix(mediaQueries.mobileWide), removePrefix(mediaQueries.tablet), removePrefix(mediaQueries.tabletLegacy), removePrefix(mediaQueries.tabletWide), removePrefix(mediaQueries.desktop), removePrefix(mediaQueries.desktopLegacy), removePrefix(mediaQueries.desktopLarge)]
  });
};

export default createRenderer;