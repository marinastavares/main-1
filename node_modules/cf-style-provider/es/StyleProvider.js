var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { Children, isValidElement, cloneElement } from 'react';
import PropTypes from 'prop-types';
import createRenderer from './createRenderer';
import { Provider } from 'react-fela'; // eslint-disable-line behance/no-deprecated
import { variables } from 'cf-style-const'; // eslint-disable-line behance/no-deprecated
import { ThemeProvider } from 'cf-style-container';

var StyleProvider = function StyleProvider(_ref) {
  var dev = _ref.dev,
      children = _ref.children,
      renderer = _ref.renderer,
      rehydrate = _ref.rehydrate,
      restProps = _objectWithoutProperties(_ref, ['dev', 'children', 'renderer', 'rehydrate']);

  var providerRenderer = renderer || createRenderer({
    dev: dev
  });
  var child = Children.only(children);
  return React.createElement(
    Provider,
    { renderer: providerRenderer, rehydrate: rehydrate },
    React.createElement(
      ThemeProvider,
      { theme: variables },
      isValidElement(child) ? cloneElement(child, _extends({}, restProps)) : child
    )
  );
};

StyleProvider.propTypes = {
  children: PropTypes.node,
  dev: PropTypes.bool,
  renderer: PropTypes.object,
  rehydrate: PropTypes.bool
};

export default StyleProvider;