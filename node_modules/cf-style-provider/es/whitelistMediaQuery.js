var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isObject = function isObject(value) {
  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !Array.isArray(value);
};

var flipKeysAndValues = function flipKeysAndValues(input) {
  return Object.keys(input).reduce(function (obj, key) {
    return _extends({}, obj, _defineProperty({}, input[key], key));
  }, {});
};

function checkMediaQuery(style, mediaQueryMap, aliases) {
  for (var property in style) {
    if (style.hasOwnProperty(property)) {
      var value = style[property];

      if (isObject(value)) {
        checkMediaQuery(value, mediaQueryMap, aliases);
        if (property.substring(0, 6) === '@media' && !mediaQueryMap.hasOwnProperty(property)) {
          console.warn('Please don\'t use "' + property + '". Use one of the aliases: ' + aliases.join(', ') + '.\nMore info: https://github.com/cloudflare/cf-ui/tree/master/packages/cf-style-provider#named-media-query');
        }
      }
    }
  }
  return style;
}

export default function whitelistMediaQuery(mediaQueryMap) {
  return function (style) {
    return checkMediaQuery(style, flipKeysAndValues(mediaQueryMap), Object.keys(mediaQueryMap));
  };
}