var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import camelCaseProperty from 'css-in-js-utils/lib/camelCaseProperty';
import { arrayEach, generateCSSSelector, RULE_TYPE } from 'fela-utils';

import rehydrateCache from './rehydrateCache';

// rehydration (WIP)
// TODO: static, keyframe, font
export default function rehydrate(renderer) {
  arrayEach(document.querySelectorAll('[data-fela-type]'), function (node) {
    var rehydrationAttribute = node.getAttribute('data-fela-rehydration') || -1;
    var rehydrationIndex = parseInt(rehydrationAttribute);

    // skip rehydration if no rehydration index is set
    // this index is set to -1 if something blocks rehydration
    if (rehydrationIndex !== -1) {
      var type = node.getAttribute('data-fela-type') || '';
      var media = node.getAttribute('media') || '';
      var css = node.textContent;

      renderer.uniqueRuleIdentifier = rehydrationIndex;

      if (type === RULE_TYPE) {
        renderer.cache = _extends({}, rehydrateCache(css, media), renderer.cache);
      }
    }
  });
}