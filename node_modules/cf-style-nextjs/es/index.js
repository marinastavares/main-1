var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';
import { createRenderer, StyleProvider as StyleProviderComponent } from 'cf-style-provider';
import { renderToSheetList } from 'fela-dom'; // eslint-disable-line behance/no-deprecated
import PropTypes from 'prop-types';

var felaRenderer = createRenderer();

var getInitialProps = function getInitialProps(callback) {
  return function (nextObj) {
    var page = nextObj.renderPage();
    var cfFelaSheetList = renderToSheetList(felaRenderer);
    felaRenderer.clear();
    var userProps = callback ? callback(nextObj) : {};
    return _extends({}, page, userProps, {
      cfFelaSheetList: cfFelaSheetList
    });
  };
};

var getStyles = function getStyles(props) {
  return props.cfFelaSheetList.map(function (_ref) {
    var type = _ref.type,
        media = _ref.media,
        css = _ref.css;
    return React.createElement('style', {
      dangerouslySetInnerHTML: { __html: css },
      'data-fela-type': type,
      key: type + '-' + media,
      media: media
    });
  });
};

var StyleProvider = function StyleProvider(_ref2) {
  var children = _ref2.children;
  return React.createElement(
    StyleProviderComponent,
    { renderer: felaRenderer },
    children
  );
};

StyleProvider.propTypes = {
  children: PropTypes.node
};

export { StyleProvider, getInitialProps, getStyles };